# Source: onap/charts/aai/charts/aai-resources/charts/serviceAccount/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-aai-resources-read
  namespace: amcop-system
---
# Source: onap/charts/aai/charts/aai-schema-service/charts/serviceAccount/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-aai-schema-service-read
  namespace: amcop-system
---
# Source: onap/charts/aai/charts/aai-traversal/charts/serviceAccount/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-aai-traversal-read
  namespace: amcop-system
---
# Source: onap/charts/aai/charts/serviceAccount/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-aai-read
  namespace: amcop-system
---
# Source: onap/charts/aai/charts/aai-graphadmin/charts/serviceAccount/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: RoleBinding
metadata:
  name: dev-aai-graphadmin-read
  namespace: amcop-system
subjects:
- kind: ServiceAccount
  name: dev-aai-graphadmin-read
roleRef:
  kind: Role
  name: dev-read
  apiGroup: rbac.authorization.k8s.io
---
# Source: onap/charts/aai/charts/aai-resources/charts/serviceAccount/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: RoleBinding
metadata:
  name: dev-aai-resources-read
  namespace: amcop-system
subjects:
- kind: ServiceAccount
  name: dev-aai-resources-read
roleRef:
  kind: Role
  name: dev-read
  apiGroup: rbac.authorization.k8s.io
---
# Source: onap/charts/aai/charts/aai-schema-service/charts/serviceAccount/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: RoleBinding
metadata:
  name: dev-aai-schema-service-read
  namespace: amcop-system
subjects:
- kind: ServiceAccount
  name: dev-aai-schema-service-read
roleRef:
  kind: Role
  name: dev-read
  apiGroup: rbac.authorization.k8s.io
---
# Source: onap/charts/aai/charts/aai-traversal/charts/serviceAccount/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: RoleBinding
metadata:
  name: dev-aai-traversal-read
  namespace: amcop-system
subjects:
- kind: ServiceAccount
  name: dev-aai-traversal-read
roleRef:
  kind: Role
  name: dev-read
  apiGroup: rbac.authorization.k8s.io
---
# Source: onap/charts/aai/charts/serviceAccount/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: RoleBinding
metadata:
  name: dev-aai-read
  namespace: amcop-system
subjects:
- kind: ServiceAccount
  name: dev-aai-read
roleRef:
  kind: Role
  name: dev-read
  apiGroup: rbac.authorization.k8s.io
---
# Source: aai/charts/aai-resources/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-aai-resources-aaf-keys
  namespace: amcop-system
  labels:
    app: aai-resources
    chart: aai-resources-11.0.0
    release: dev
    heritage: Helm
type: Opaque
data:
  bath_config.csv: IyBBQUkgLT4gYWFpQGFhaS5vbmFwLm9yZwpCYXNpYyBRVUZKT2tGQlNRPT0sQmFzaWMgWVdGcFFHRmhhUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIE1vZGVsTG9hZGVyIC0+IGFhaUBhYWkub25hcC5vcmcKQmFzaWMgVFc5a1pXeE1iMkZrWlhJNlRXOWtaV3hNYjJGa1pYST0sQmFzaWMgWVdGcFFHRmhhUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIEFhaVVJIC0+IGFhaUBhYWkub25hcC5vcmcsCkJhc2ljIFFXRnBWVWs2UVdGcFZVaz0sQmFzaWMgWVdGcFFHRmhhUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIE1TTyAtPiBzb0Bzby5vbmFwLm9yZwpCYXNpYyBUVk5QT2sxVFR3PT0sQmFzaWMgYzI5QWMyOHViMjVoY0M1dmNtYzZaR1Z0YnpFeU16UTFOaUU9LDIwNTAtMDMtMDMKCiMgU0ROQyAtPiBzZG5jQHNkbmMub25hcC5vcmcKQmFzaWMgVTBST1F6cFRSRTVELEJhc2ljIGMyUnVZMEJ6Wkc1akxtOXVZWEF1YjNKbk9tUmxiVzh4TWpNME5UWWgsMjA1MC0wMy0wMwoKIyBEQ0FFIC0+IGRjYWVAZGNhZS5vbmFwLm9yZwpCYXNpYyBSRU5CUlRwRVEwRkYsQmFzaWMgWkdOaFpVQmtZMkZsTG05dVlYQXViM0puT21SbGJXOHhNak0wTlRZaCwyMDUwLTAzLTAzCgojIFBPTElDWSAtPiBwb2xpY3lAcG9saWN5Lm9uYXAub3JnCkJhc2ljIFVFOU1TVU5aT2xCUFRFbERXUT09LEJhc2ljIGNHOXNhV041UUhCdmJHbGplUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIEFTREMgLT4gc2RjQHNkYy5vbmFwLm9yZwpCYXNpYyBRVk5FUXpwQlUwUkQsQmFzaWMgYzJSalFITmtZeTV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIFZJRCAtPiB2aWRAdmlkLm9uYXAub3JnCkJhc2ljIFZrbEVPbFpKUkE9PSxCYXNpYyBkbWxrUUhacFpDNXZibUZ3TG05eVp6cGtaVzF2TVRJek5EVTJJUT09LDIwNTAtMDMtMDMKCiMgQVBQQyAtPiBhcHBjQGFwcGMub25hcC5vcmcKQmFzaWMgUVZCUVF6cEJVRkJELEJhc2ljIFlYQndZMEJoY0hCakxtOXVZWEF1YjNKbk9tUmxiVzh4TWpNME5UWWgsMjA1MC0wMy0wMwoKIyBPT0YgLT4gb29mQG9vZi5vbmFwLm9yZwpCYXNpYyBUMDlHT2s5UFJnPT0sQmFzaWMgYjI5bVFHOXZaaTV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFEySVE9PSwyMDUwLTAzLTAzCgo=
---
# Source: aai/charts/aai-traversal/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dev-aai-traversal-aaf
  namespace: amcop-system
  labels:
    app: aai-traversal
    chart: aai-traversal-11.0.0
    release: dev
    heritage: Helm
type: Opaque
data:
  bath_config.csv: IyBBQUkgLT4gYWFpQGFhaS5vbmFwLm9yZwpCYXNpYyBRVUZKT2tGQlNRPT0sQmFzaWMgWVdGcFFHRmhhUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIE1vZGVsTG9hZGVyIC0+IGFhaUBhYWkub25hcC5vcmcKQmFzaWMgVFc5a1pXeE1iMkZrWlhJNlRXOWtaV3hNYjJGa1pYST0sQmFzaWMgWVdGcFFHRmhhUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIEFhaVVJIC0+IGFhaUBhYWkub25hcC5vcmcsCkJhc2ljIFFXRnBWVWs2UVdGcFZVaz0sQmFzaWMgWVdGcFFHRmhhUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIE1TTyAtPiBzb0Bzby5vbmFwLm9yZwpCYXNpYyBUVk5QT2sxVFR3PT0sQmFzaWMgYzI5QWMyOHViMjVoY0M1dmNtYzZaR1Z0YnpFeU16UTFOaUU9LDIwNTAtMDMtMDMKCiMgU0ROQyAtPiBzZG5jQHNkbmMub25hcC5vcmcKQmFzaWMgVTBST1F6cFRSRTVELEJhc2ljIGMyUnVZMEJ6Wkc1akxtOXVZWEF1YjNKbk9tUmxiVzh4TWpNME5UWWgsMjA1MC0wMy0wMwoKIyBEQ0FFIC0+IGRjYWVAZGNhZS5vbmFwLm9yZwpCYXNpYyBSRU5CUlRwRVEwRkYsQmFzaWMgWkdOaFpVQmtZMkZsTG05dVlYQXViM0puT21SbGJXOHhNak0wTlRZaCwyMDUwLTAzLTAzCgojIFBPTElDWSAtPiBwb2xpY3lAcG9saWN5Lm9uYXAub3JnCkJhc2ljIFVFOU1TVU5aT2xCUFRFbERXUT09LEJhc2ljIGNHOXNhV041UUhCdmJHbGplUzV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIEFTREMgLT4gc2RjQHNkYy5vbmFwLm9yZwpCYXNpYyBRVk5FUXpwQlUwUkQsQmFzaWMgYzJSalFITmtZeTV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFUySVE9PSwyMDUwLTAzLTAzCgojIFZJRCAtPiB2aWRAdmlkLm9uYXAub3JnCkJhc2ljIFZrbEVPbFpKUkE9PSxCYXNpYyBkbWxrUUhacFpDNXZibUZ3TG05eVp6cGtaVzF2TVRJek5EVTJJUT09LDIwNTAtMDMtMDMKCiMgQVBQQyAtPiBhcHBjQGFwcGMub25hcC5vcmcKQmFzaWMgUVZCUVF6cEJVRkJELEJhc2ljIFlYQndZMEJoY0hCakxtOXVZWEF1YjNKbk9tUmxiVzh4TWpNME5UWWgsMjA1MC0wMy0wMwoKIyBPT0YgLT4gb29mQG9vZi5vbmFwLm9yZwpCYXNpYyBUMDlHT2s5UFJnPT0sQmFzaWMgYjI5bVFHOXZaaTV2Ym1Gd0xtOXlaenBrWlcxdk1USXpORFEySVE9PSwyMDUwLTAzLTAzCgo=
---
# Source: aai/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: aai-common-aai-auth
  namespace: amcop-system
  labels:
    app: aai
    chart: aai-11.0.0
    release: dev
    heritage: Helm
type: Opaque
data:
  truststoreONAPall.jks: 
---
# Source: aai/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: aai-common-truststore
  namespace: amcop-system
type: Opaque
data:
  aai_keystore: /u3+7QAAAAIAAAABAAAAAQAkYWFpLXJlc291cmNlc0BhYWktcmVzb3VyY2VzLm9uYXAub3JnAAABfQFb3GcAAAUAMIIE/DAOBgorBgEEASoCEQEBBQAEggTotboPTGM0sbJtO4aDYKNYqT420Av1/zDAOV0/KnGq5A1chet+2Y5kORxD+1z7gl+EywvAlWNeh0El515eMfbdo9MnY3HJkIFgIdiPho9zSJeZOxlY7/rj/J4rGpRCxtfCOwbUlxPENg+gIj1W7VTaBwIS27jbxBDCBNhVv+ScjOzRKaU28wxNRTf0VttqYUDziTl72tj32yr9KUAW1xfFjqkws5lPjhavG8Nj0mV7KsmG9bgki4NgOY0+2yDGWjYymWekEQ7bJ/lb3dQSF8WAGWY4Q3qAdtNoIHi0ZhHEWeQKDM3VJ1dWIE19VLereK8tlzbE1XcjfR/Ox7OsbZVqlZFmxUt4NByLQOlSV/ZDhS0jZjdSCgzU5M+cY0YPv+0KLi3utIStYDsjmBuB2EStaZKl/afyOxpNlKzhJtjObvUJsS4sNZF560BO0IVR5HMv68CPPtY+wbQnU6ood9YbgTbMWinBviIMcqednWRaDysgPsB6kIMDu2pIV5E+HcAy096f5LWhL1hQp5ZtKO9IO8Dhj8C+g2K8Q8jXkYYBecZZgY8z8f68m8s+svonfZBPbWMvL7TXKdqQO5rvvplodNxBhGGYbIEBpGCm3mVcB+GY946gmW4RtundSJFajMUpWF5/rKkAs5btEHHhj+nEXzoh3lUJcviBQV6lRQA29Mq3Sp76WalVltIOGueZCF+JPuNxHF98n0SjScyvmJzhxjTqqMSeXYY+LEdLiPbPsz0i2M3NWiWjqmfmYzeAf8M6LW6RjYj31TvU2cqFWiAX0NLfoPn7+8ANSvbM+af1+qrfHhZxO3iX2RYAbc4VFh2GSKTI9y77rYFPqpqkQCV83LW4egfl1xoYROsMgi4ZUMIV9FfvTS5qFu9WTMHY0EZUlMzJVcKquCO3wCSs/pdDAPv0KHeOcYwPFECBmGbPf9wFYJ4FPCBrm0hY8h8kV0moYiRIJnd9rxUSkHF9XrGCmhrjKPPW+4jYclfBRMDFHhTtFo25/2ONZgHKUYSvOkcQctnKKCnedC6cDAO4n8+ZWx7MSAdC6L8C56Twn+ciq988fkD74YrFf+UoO6hIQiJ18oPqpA91b0SSDuQQAyaSh//Vrw1sG9FSepY3x2p2rn92UUymx85asseitZPHOcVDandZ4LMSxYS0Vn8x0P7/ha9ggteUFHN1CLkmQNYN2Qe5iTuPFbCXmsn2z9WhktMaqie1gVa72SpViWIMvA8olHzzzt6cGlgWpVGFGiClzilmo3NYLkalTaBSgc3xw4chIfMcI6NDSo8IrOLReAkmWaHiB8yGyP9fmHubMPt14570M6CEmQ1gBxiwxFubzb11Ax1iFelDpJ8YKOjMqhXanIkBx1gn5I/dI788xDJOq4d8tquZusMtS7DPlAqxUapiCv0aqwIGfdzcO7nwD6/mflsXvzPH5Iw5I9feB0cZ4jJXNJgA1U1cEfBVBDvbwlVHX5Z7YVrqhwdNG0dF0Qano8NkZ0Rdu5Anf44w5sRWum0Urk6Gg+Fe5q2A9myshj9JVsrPkZ8GxV36FOulj1OHBwmsgPJuZh8I8YoP+PHPz8W3IZpqDrrhqhpgfdpiqOLTMN53pFXIooHAlj3BSo7USpxQri6CqZ+suFWGl4mA7+oqTUzGBlCcqbSmebM2OOKmGpoR2HygqH0AAAACAAVYLjUwOQAABEswggRHMIIDL6ADAgECAgg4Td5pe8LcYTANBgkqhkiG9w0BAQsFADBHMQswCQYDVQQGEwJVUzENMAsGA1UECgwET05BUDEOMAwGA1UECwwFT1NBQUYxGTAXBgNVBAMMEGludGVybWVkaWF0ZUNBXzkwHhcNMjExMTA0MTMwOTI1WhcNMjIxMTA0MTMwOTI1WjB3MRYwFAYDVQQDDA1hYWktcmVzb3VyY2VzMTEwLwYDVQQLDChhYWktcmVzb3VyY2VzQGFhaS1yZXNvdXJjZXMub25hcC5vcmc6REVWMQ4wDAYDVQQLDAVPU0FBRjENMAsGA1UECgwET05BUDELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCkVndozmqD81vdX4Af6gEGRuox5Xa629u4jAZ/KHZOrN5i1a6AozllLhsR+HIcoKBEaS+rn2AWBTqakc6g8Vg+WMvJdJoagB2BaYekdYON6ZkMx3l2bA6Xif/wCL82Ax843lk2fCqQvIkPMjfvy69WHpSvZ735xrZHgkketO0jKn/SJ0F4Xx8rakfuAEvlU9qQPPk28SGJF2cG5lS5P5LxgMeD80eaKjJ3qO8tdGCBRVWow5No/vlVciGI0/efzdkPbLPyMfb0t7q1N0ijln3noe6SVU6TrtVZEX/INwDKd26BGTTlBdutrGsIPaXM29ao+Itp9DFM54bvshCCx20/AgMBAAGjggEFMIIBATAJBgNVHRMEAjAAMA4GA1UdDwEB/wQEAwIF4DAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwVAYDVR0jBE0wS4AUgfeZWxC5yIze81Je6k5poEM+rN2hMKQuMCwxDjAMBgNVBAsMBU9TQUFGMQ0wCwYDVQQKDARPTkFQMQswCQYDVQQGEwJVU4IBBzAdBgNVHQ4EFgQUDzFTUGDxsW4zJ15MrWPcARZFg6kwTQYDVR0RBEYwRIEfbWFyay5kLm1hbmFnZXJAcGVvcGxlLm9zYWFmLmNvbYINYWFpLXJlc291cmNlc4ISYWFpLXJlc291cmNlcy5vbmFwMA0GCSqGSIb3DQEBCwUAA4IBAQBOxM/bMmQyldQCQHwuq5JZsmuY1Je2izyPlbHKJfKKg1mA+hZoDvg0cR1hNEDzrY9n1NZS17U2EJZj9kgB4hh4bQZ3yI6b+lFMZd8H9P/TUIC92aER3AbgOtPni6+uIYWpXxgPMh/3gk+d7iJ362seEX339EjMNnQWmL9K8uwxguyQeu+sGGRLVNgsJy3h+/y+Y895Ay5qMxL9WOPa4DFe8RZpA7kWBUz71tj7b7EpOAto+d0IJBGTYWeuWRImtMMg4tVgcSagRCnyU+vPnJ76igOTG/RIngQDbRl8JITbHCw87cOytu3b++W/eLa0URafWpjo/02KiF6OBEFLCxfyAAVYLjUwOQAABHkwggR1MIICXaADAgECAgEHMA0GCSqGSIb3DQEBCwUAMCwxDjAMBgNVBAsMBU9TQUFGMQ0wCwYDVQQKDARPTkFQMQswCQYDVQQGEwJVUzAeFw0xODA4MTcxODUxMzdaFw0yMzA4MTcxODUxMzdaMEcxCzAJBgNVBAYTAlVTMQ0wCwYDVQQKDARPTkFQMQ4wDAYDVQQLDAVPU0FBRjEZMBcGA1UEAwwQaW50ZXJtZWRpYXRlQ0FfOTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK/QcdSRtre4200jeM8qKZRx3pE3CaFIIkud4xameOqnn8D4cIrI2wRpPjLXvuE0uYKb9oybW7Ykh+KRz7zASosJIEE/P4/SH52j6xntT7ih5CLN1hikR3McnZKJ4cdry+27zStTec7Y0QiS5gLbQdwpIS2Xx8UqyTeeqWFj60Z9gk9NdwM5AA7jQFNyBq3cLe4gkeRYknhGK+6cTgsS5G/1DIqADDuuQlW/5/uC6qlmVfLp3MCS5TtdQtZyCjnkyRmWyyiISsy8Rklp3lpYq9FjeDupSNpDrA7XnA4BShEFb3p55llvK2CfyTJtwHL75R7j2A+2CbUwX8qUCynQwPkCAwEAAaOBhjCBgzAdBgNVHQ4EFgQUgfeZWxC5yIze81Je6k5poEM+rN0wHwYDVR0jBBgwFoAUU1Uz8kvr0FGxwXiawSgxe+/q7UkwEgYDVR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMA0GCSqGSIb3DQEBCwUAA4ICAQAPE3KaII2vZ7fuItF6hrEqZm/CjHRxOI0BqPuJp9HObAihjdVc7xCLHkhhyngVpDt9XWPKn8CZpKfId/o6yXSzHw/GxCQ7sAu23EpSuN9u81JVQDYL++W7mbtRUkshS0UNkFZqfNRKaROxgsemIA0VAp3Zz9xTWpdzLOAlUUQVXLIc2QXsiz76mMb0zWHBAc6hOcS5TTXc/tfWYd6T5FcR+ElbB7tSxmcEplpkptBm7uES2opZin9CweCeOgtheyHRYPmvP+YHF1N0MsakWpYPMOpvyuxieoHOijC+xqxXxfw5KSi/Qe3xiRrRyQUf3J/yPULCZuXq226ic6GTLc3+DAsSjO6HLtM9xkZXLN68XvSRfLuDUJeSkUYnIQdeimuU2LwVHgj40XNsN7prZwWjDUk3X0An1nlGTmbszSZA9pDhFyKSMHdqguwBIIlObU6k4Ud/EQqIFbguyndRzn9Fv1k1t8uvCpZlEztu5bV7d6Quqe2BuTK4oohIepUm7D+9ceXWM2JsSj34m5DzxU24BybtakZSiB4JraICU9NyQ9l6L4zBnzC2m/FPJiVkQLwNbNjVULb35bY3ly+HTV7YTdCXTxbXMvrd2quB0RndVaPOihiLh6kGYxdO+i5b4WXK9zD/ShNx83RuIMi3SYKRnkJBWN8Yv0NM5i15HmHD6cUHzSlJbnWPFKRnuronyLaRONIf
---
# Source: aai/charts/aai-graphadmin/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-graphadmin
  namespace: amcop-system
  labels:
    app: aai-graphadmin
    chart: aai-graphadmin-11.0.0
    release: dev
    heritage: Helm
data:
  logback.xml: |
    <?xml version="1.0"?>
    <!--

    -->
    <configuration scan="true" scanPeriod="60 seconds" debug="false">
      <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>
      <property resource="application.properties"/>
      <property name="namespace" value="graph-admin"/>
      <property name="AJSC_HOME" value="${AJSC_HOME:-.}"/>
      <property name="logDirectory" value="${AJSC_HOME}/logs"/>
      <property name="maxHistory" value='7' />
      <property name="totalSizeCap" value='6GB' />
      <property name="queueSize" value='1000'/>
      <property name="logToFileEnabled" value='true'/>
      <!-- Old patterns
        <property name="eelfLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfAuditLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfMetricLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{targetVirtualEntity}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%X{serviceName}|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%X{serviceName}|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%ecompResponseCode|%ecompResponseDescription|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfTransLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{partnerName}:%m%n"/>
        -->
      <property name="p_tim" value="%d{&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, UTC}"/>
      <property name="p_lvl" value="%level"/>
      <property name="p_log" value="%logger"/>
      <property name="p_mdc" value="%replace(%replace(%mdc){'\t','\\\\t'}){'\n', '\\\\n'}"/>
      <property name="p_msg" value="%replace(%replace(%msg){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_exc" value="%replace(%replace(%rootException){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_mak" value="%replace(%replace(%marker){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_thr" value="%thread"/>
      <property name="pattern" value="%nopexception${p_tim}\t${p_thr}\t${p_lvl}\t${p_log}\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t%n"/>
      <!-- Patterns from onap demo -->
      <property name="errorPattern" value="%X{LogTimestamp}|%X{RequestID}|%thread|%X{ServiceName}|%X{PartnerName}|%X{TargetEntity}|%X{TargetServiceName}|%.-5level|%X{ErrorCode}|%X{ErrorDesc}|%msg%n"/>
      <property name="debugPattern" value="%X{LogTimestamp}|%X{RequestID}|%msg\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t|^%n"/>
      <property name="auditPattern" value="%X{EntryTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%X{ServiceName}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||${p_mak}|${p_mdc}|||%msg%n"/>
      <property name="metricPattern" value="%X{InvokeTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%X{ServiceName}|%X{PartnerName}|%X{TargetEntity}|%X{TargetServiceName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||%X{TargetVirtualEntity}|${p_mak}|${p_mdc}|||%msg%n"/>
      <property name="transLogPattern" value="%X{LogTimestamp}|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{RequestID}|%X{ServiceInstanceID}|%-10t|%X{ServerFQDN}|%X{ServiceName}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%replace(%replace(%X{ResponseDesc}){'\\|', '!'}){'\r|\n', '^'}|%X{InstanceUUID}|%level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{clientIpAddress}||%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{PartnerName}:%m%n"/>
      <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
      <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
      <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
          <providers>
            <timestamp><fieldName>timestamp</fieldName></timestamp>
            <message/>
            <mdc>
              <fieldName>context</fieldName>
              <excludeMdcKeyName>ServerIPAddress</excludeMdcKeyName>
              <excludeMdcKeyName>EntryTimestamp</excludeMdcKeyName>
              <excludeMdcKeyName>InvokeTimestamp</excludeMdcKeyName>
              <excludeMdcKeyName>ErrorCode</excludeMdcKeyName>
              <excludeMdcKeyName>ErrorDesc</excludeMdcKeyName>
            </mdc>
            <stackTrace>
              <fieldName>exception</fieldName>
              <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                <exclude>^sun\.reflect\..*\.invoke</exclude>
                <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                <rootCauseFirst>true</rootCauseFirst>
              </throwableConverter>
            </stackTrace>
            <threadName><fieldName>thread</fieldName></threadName>
            <loggerName>
              <fieldName>logger</fieldName>
              <shortenedLoggerNameLength>36</shortenedLoggerNameLength>
            </loggerName>
            <logLevel/>
            <pattern>
              <pattern>{"logType":"app"}</pattern>
            </pattern>
          </providers>
        </encoder>
      </appender>

      <if condition='property("logToFileEnabled").contains("true")'>
        <then>
            <appender name="SANE" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${logDirectory}/rest/sane.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/rest/sane.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{1024} - %msg%n</pattern>
              </encoder>
            </appender>
            <appender name="asyncSANE" class="ch.qos.logback.classic.AsyncAppender">
              <queueSize>${queueSize}</queueSize>
              <includeCallerData>true</includeCallerData>
              <appender-ref ref="SANE"/>
            </appender>
            <appender name="METRIC" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${logDirectory}/rest/metrics.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/rest/metrics.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${metricPattern}</pattern>
              </encoder>
            </appender>
            <appender name="asyncMETRIC" class="ch.qos.logback.classic.AsyncAppender">
              <queueSize>${queueSize}</queueSize>
              <includeCallerData>true</includeCallerData>
              <appender-ref ref="METRIC"/>
            </appender>
            <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <file>${logDirectory}/rest/debug.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/rest/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="asyncDEBUG" class="ch.qos.logback.classic.AsyncAppender">
              <queueSize>${queueSize}</queueSize>
              <appender-ref ref="DEBUG"/>
              <includeCallerData>true</includeCallerData>
            </appender>
            <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${logDirectory}/rest/error.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/rest/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <appender name="asyncERROR" class="ch.qos.logback.classic.AsyncAppender">
              <queueSize>${queueSize}</queueSize>
              <appender-ref ref="ERROR"/>
            </appender>
            <appender name="AUDIT" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${logDirectory}/rest/audit.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/rest/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <appender name="asyncAUDIT" class="ch.qos.logback.classic.AsyncAppender">
              <queueSize>${queueSize}</queueSize>
              <includeCallerData>true</includeCallerData>
              <appender-ref ref="AUDIT"/>
            </appender>
            <appender name="translog" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <file>${logDirectory}/rest/translog.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/rest/translog.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${transLogPattern}</pattern>
              </encoder>
            </appender>
            <appender name="asynctranslog" class="ch.qos.logback.classic.AsyncAppender">
              <queueSize>${queueSize}</queueSize>
              <includeCallerData>true</includeCallerData>
              <appender-ref ref="translog"/>
            </appender>
            <appender name="dmaapAAIEventConsumer" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/dmaapAAIEventConsumer/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${"errorPattern"}</pattern>
              </encoder>
            </appender>
            <appender name="dmaapAAIEventConsumerInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dmaapAAIEventConsumer/dmaap-transaction.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/dmaap-transaction.log.%d{yyyy-MM-dd}
                </fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dmaapAAIEventConsumerDebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dmaapAAIEventConsumer/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dmaapAAIEventConsumerMetric" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dmaapAAIEventConsumer/metrics.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/metrics.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${metricPattern}</pattern>
              </encoder>
            </appender>
            <appender name="external" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <file>${logDirectory}/external/external.log</file>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/external/external.log.%d{yyyy-MM-dd}
                </fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <!-- DataGrooming logs started -->
            <appender name="dataGrooming" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/dataGrooming/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataGrooming/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dataGroomingdebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataGrooming/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataGrooming/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dataGroomingaudit" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataGrooming/audit.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataGrooming/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <!-- DataGrooming logs ended -->
            <!-- DataSnapshot logs started -->
            <appender name="dataSnapshot" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/dataSnapshot/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataSnapshot/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dataSnapshotdebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataSnapshot/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataSnapshot/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dataSnapshotaudit" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataSnapshot/audit.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataSnapshot/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <!-- DataSnapshot logs ended -->
            <!-- HistoryTruncate logs started -->
            <appender name="historyTruncate" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/historyTruncate/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/historyTruncate/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <appender name="historyTruncatedebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/historyTruncate/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/historyTruncate/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="historyTruncateaudit" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/historyTruncate/audit.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/historyTruncate/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <!-- historyTruncate logs ended -->
            <!-- CreateDBSchema logs started  -->
            <appender name="createDBSchema" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/createDBSchema/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/createDBSchema/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${"errorPattern"}</pattern>
              </encoder>
            </appender>
            <appender name="createDBSchemadebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/createDBSchema/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/createDBSchema/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="createDBSchemametric" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/createDBSchema/metrics.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/createDBSchema/metrics.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${metricPattern}</pattern>
              </encoder>
            </appender>
            <!-- CreateDBSchema logs ended  -->
            <!-- DataCleanupTasks logs started  -->
            <appender name="dataCleanuperror" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/misc/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/misc/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${"errorPattern"}</pattern>
              </encoder>
            </appender>
            <appender name="dataCleanupdebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/misc/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/misc/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dataCleanupaudit" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/misc/audit.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/misc/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <!-- DataCleanupTasks logs ended  -->
            <!-- dupeTool logs started -->
            <appender name="dupeTooldebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dupetool/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dupetool/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dupeToolerror" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>WARN</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dupeTool/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dupeTool/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <!-- dupeTool logs ended -->
            <!-- dynamicPayloadGenerator log starts here -->
            <appender name="dynamicPayloadGeneratorError" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/dynamicPayloadGenerator/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dynamicPayloadGenerator/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dynamicPayloadGeneratorDebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dynamicPayloadGenerator/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dynamicPayloadGenerator/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dynamicPayloadGeneratorAudit" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataExport/audit.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dynamicPayloadGenerator/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <!-- dynamicPayloadGenerator log ends here -->
            <!-- forceDelete logs started -->
            <appender name="forceDeletedebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/forceDelete/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/forceDelete/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="forceDeleteerror" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>WARN</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/forceDelete/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/forceDelete/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <!-- forceDelete logs ended -->
            <!-- migration logs started -->
            <appender name="migrationdebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/migration/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/migration/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="migrationerror" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>WARN</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/migration/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/migration/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <!-- migration logs ended -->
            <!-- DataGrooming logs started -->
            <appender name="dataExportError" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/dataExport/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataExport/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dataExportDebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataExport/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataExport/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dataExportAudit" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataExport/audit.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dataExport/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <!-- schemaMod log starts -->
            <appender name="schemaModdebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/schemaMod/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/schemaMod/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="schemaModerror" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>WARN</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/schemaMod/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/schemaMod/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <!-- schemaMod log ends -->
            <!-- uniquePropertyCheck log starts here -->
            <appender name="uniquePropertyCheckdebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/uniquePropertyCheck/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/uniquePropertyCheck/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="uniquePropertyCheckmetric" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/uniquePropertyCheck/metrics.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/uniquePropertyCheck/metrics.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${metricPattern}</pattern>
              </encoder>
            </appender>
            <appender name="uniquePropertyCheckerror" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>WARN</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/uniquePropertyCheck/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/uniquePropertyCheck/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <!-- uniquePropertyCheck log ends here -->
            <!-- dynamicPayloadGenerator log starts here -->
            <appender name="dynamicPayloadGeneratorError" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
              </filter>
              <File>${logDirectory}/dynamicPayloadGenerator/error.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dynamicPayloadGenerator/error.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${errorPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dynamicPayloadGeneratorDebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dynamicPayloadGenerator/debug.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dynamicPayloadGenerator/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${debugPattern}</pattern>
              </encoder>
            </appender>
            <appender name="dynamicPayloadGeneratorAudit" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
              </filter>
              <File>${logDirectory}/dataExport/audit.log</File>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logDirectory}/dynamicPayloadGenerator/audit.log.%d{yyyy-MM-dd}</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
                <totalSizeCap>${totalSizeCap}</totalSizeCap>
              </rollingPolicy>
              <encoder>
                <pattern>${auditPattern}</pattern>
              </encoder>
            </appender>
            <!-- dynamicPayloadGenerator log ends here -->
        </then>
      </if>

      <logger name="org.onap.aai" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncDEBUG"/>
            <appender-ref ref="asyncSANE"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <!-- Spring related loggers -->
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.beans" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="com.blog.spring.jms" level="WARN"/>
      <logger name="com.jayway.jsonpath" level="WARN"/>
      <!-- AJSC Services (bootstrap services) -->
      <logger name="ajsc" level="WARN"/>
      <logger name="ajsc.RouteMgmtService" level="WARN"/>
      <logger name="ajsc.ComputeService" level="WARN"/>
      <logger name="ajsc.VandelayService" level="WARN"/>
      <logger name="ajsc.FilePersistenceService" level="WARN"/>
      <logger name="ajsc.UserDefinedJarService" level="WARN"/>
      <logger name="ajsc.UserDefinedBeansDefService" level="WARN"/>
      <logger name="ajsc.LoggingConfigurationService" level="WARN"/>
      <!-- AJSC related loggers (DME2 Registration, csi logging, restlet, servlet logging) -->
      <logger name="org.codehaus.groovy" level="WARN"/>
      <logger name="com.att.scamper" level="WARN"/>
      <logger name="ajsc.utils" level="WARN"/>
      <logger name="ajsc.utils.DME2Helper" level="WARN"/>
      <logger name="ajsc.filters" level="WARN"/>
      <logger name="ajsc.beans.interceptors" level="WARN"/>
      <logger name="ajsc.restlet" level="WARN"/>
      <logger name="ajsc.servlet" level="WARN"/>
      <logger name="com.att.ajsc" level="WARN"/>
      <logger name="com.att.ajsc.csi.logging" level="WARN"/>
      <logger name="com.att.ajsc.filemonitor" level="WARN"/>
      <logger name="com.netflix.loadbalancer" level="WARN"/>
      <logger name="org.apache.zookeeper" level="WARN"/>
      <!-- Other Loggers that may help troubleshoot -->
      <logger name="net.sf" level="WARN"/>
      <logger name="org.apache.commons.httpclient" level="WARN"/>
      <logger name="org.apache.commons" level="WARN"/>
      <logger name="org.apache.coyote" level="WARN"/>
      <logger name="org.apache.jasper" level="WARN"/>
      <!-- Camel Related Loggers (including restlet/servlet/jaxrs/cxf logging. May aid in troubleshooting) -->
      <logger name="org.apache.camel" level="WARN"/>
      <logger name="org.apache.cxf" level="WARN"/>
      <logger name="org.apache.camel.processor.interceptor" level="WARN"/>
      <logger name="org.apache.cxf.jaxrs.interceptor" level="WARN"/>
      <logger name="org.apache.cxf.service" level="WARN"/>
      <logger name="org.restlet" level="WARN"/>
      <logger name="org.apache.camel.component.restlet" level="WARN"/>
      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb" level="OFF"/>
      <!-- logback internals logging -->
      <logger name="ch.qos.logback.classic" level="WARN"/>
      <logger name="ch.qos.logback.core" level="WARN"/>
      <logger name="org.eclipse.jetty" level="WARN"/>
      <!-- logback jms appenders & loggers definition starts here -->
      <if condition='property("logToFileEnabled").contains("true")'>
        <then>
          <appender name="auditLogs" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter"/>
            <file>${logDirectory}/perf-audit/Audit-${lrmRVer}-${lrmRO}-${Pid}.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
              <fileNamePattern>${logDirectory}/perf-audit/Audit-${lrmRVer}-${lrmRO}-${Pid}.%i.log.zip</fileNamePattern>
              <minIndex>1</minIndex>
              <maxIndex>9</maxIndex>
            </rollingPolicy>
            <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
              <maxFileSize>5MB</maxFileSize>
            </triggeringPolicy>
            <encoder>
              <pattern>auditPattern</pattern>
            </encoder>
          </appender>
          <appender name="perfLogs" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter"/>
            <file>${logDirectory}/perf-audit/Perform-${lrmRVer}-${lrmRO}-${Pid}.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
              <fileNamePattern>${logDirectory}/perf-audit/Perform-${lrmRVer}-${lrmRO}-${Pid}.%i.log.zip</fileNamePattern>
              <minIndex>1</minIndex>
              <maxIndex>9</maxIndex>
            </rollingPolicy>
            <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
              <maxFileSize>5MB</maxFileSize>
            </triggeringPolicy>
            <encoder>
              <pattern>"%d [%thread] %-5level %logger{1024} - %msg%n"</pattern>
            </encoder>
          </appender>
          <appender name="auth" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>DEBUG</level>
            </filter>
            <file>${logDirectory}/auth/auth.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/auth/auth.log.%d{yyyy-MM-dd}</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}[%thread] %-5level %logger{1024} - %msg%n</pattern>
            </encoder>
          </appender>
          <appender name="asyncAUTH" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="auth"/>
          </appender>
        </then>
      </if>

      <logger name="AuditRecord" level="INFO" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="auditLogs"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="AuditRecord_DirectCall" level="INFO" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="auditLogs"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="PerfTrackerRecord" level="INFO" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="perfLogs"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <!-- logback jms appenders & loggers definition ends here -->
      <logger name="org.onap.aai.aaf" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncAUTH"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>

      <if condition='property("logToFileEnabled").contains("true")'>
        <then>
          <logger name="org.onap.aai.aailog.filter.RestClientLoggingInterceptor" level="INFO">
            <appender-ref ref="asyncMETRIC"/>
          </logger>
          <logger name="org.onap.logging.filter.base.AbstractMetricLogFilter" level="INFO">
            <appender-ref ref="asyncMETRIC"/>
          </logger>
          <logger name="org.onap.aai.aailog.logs.AaiScheduledTaskAuditLog" level="INFO">
            <appender-ref ref="asyncAUDIT"/>
          </logger>
          <logger name="org.onap.aai.aailog.logs.AaiDBMetricLog" level="INFO">
            <appender-ref ref="asyncMETRIC"/>
          </logger>
          <logger name="org.onap.aai.logging.ErrorLogHelper" level="WARN">
            <appender-ref ref="asyncERROR"/>
          </logger>
        </then>
      </if>

      <logger name="org.onap.logging.filter.base.AbstractAuditLogFilter" level="INFO">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncAUDIT"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.interceptors.post" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asynctranslog"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.dmaap" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dmaapAAIEventConsumer"/>
            <appender-ref ref="dmaapAAIEventConsumerDebug"/>
            <appender-ref ref="dmaapAAIEventConsumerMetric"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.datasnapshot" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dataSnapshot"/>
            <appender-ref ref="dataSnapshotdebug"/>
            <appender-ref ref="dataSnapshotaudit"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.historytruncate" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="historyTruncate"/>
            <appender-ref ref="historyTruncatedebug"/>
            <appender-ref ref="historyTruncateaudit"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.datagrooming" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dataGrooming"/>
            <appender-ref ref="dataGroomingdebug"/>
            <appender-ref ref="dataGroomingaudit"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.schema" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="createDBSchema"/>
            <appender-ref ref="createDBSchemadebug"/>
            <appender-ref ref="createDBSchemametric"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.dbgen.DupeTool" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dupeTooldebug"/>
            <appender-ref ref="dupeToolerror"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.dbgen.DynamicPayloadGenerator" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dynamicPayloadGeneratorAudit"/>
            <appender-ref ref="dynamicPayloadGeneratorError"/>
            <appender-ref ref="dynamicPayloadGeneratorDebug"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.dbgen" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="createDBSchema"/>
            <appender-ref ref="createDBSchemadebug"/>
            <appender-ref ref="createDBSchemametric"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.datacleanup" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dataCleanuperror"/>
            <appender-ref ref="dataCleanupdebug"/>
            <appender-ref ref="dataCleanupaudit"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.migration" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="migrationdebug"/>
            <appender-ref ref="migrationerror"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.util.SendMigrationNotifications" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="migrationdebug"/>
            <appender-ref ref="migrationerror"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.util.SendDeleteMigrationNotifications" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="migrationdebug"/>
            <appender-ref ref="migrationerror"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.dataexport" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dataExportError"/>
            <appender-ref ref="dataExportDebug"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <if condition='property("logToFileEnabled").contains("true")'>
        <then>
          <logger name="org.onap.aai.dataexport" level="DEBUG" additivity="false">
            <appender-ref ref="dataExportAudit"/>
          </logger>
        </then>
      </if>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.zookeeper" level="WARN"/>
      <logger name="com.netflix" level="WARN"/>
      <logger name="org.janusgraph" level="WARN"/>
      <logger name="com.att.aft.dme2" level="WARN"/>
      <!-- ============================================================================ -->
      <!-- General EELF logger -->
      <!-- ============================================================================ -->
      <logger name="com.att.eelf" level="WARN" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncDEBUG"/>
            <appender-ref ref="asyncERROR"/>
            <appender-ref ref="asyncMETRIC"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <root level="DEBUG">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="external"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </root>
    </configuration>
  localhost-access-logback.xml: |-
    <!--

    -->
    <configuration scan="true" scanPeriod="60 seconds" debug="false">
        <property name="AJSC_HOME" value="${AJSC_HOME:-.}" />
        <property name="maxHistory" value='7' />
        <property name="totalSizeCap" value='6GB' />
        <property name="logToFileEnabled" value='true'/>
        <if condition='property("logToFileEnabled").contains("true")'>
            <then>
                <appender name="ACCESS"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <file>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log</file>
                    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                        <fileNamePattern>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log.%d{yyyy-MM-dd}
                        </fileNamePattern>
                        <maxHistory>${maxHistory}</maxHistory>
                        <totalSizeCap>${totalSizeCap}</totalSizeCap>
                    </rollingPolicy>
                    <encoder class="org.onap.aai.logging.CustomLogPatternLayoutEncoder">
                        <Pattern>%a %u %z [%t] "%m %U%q" %s %b %y %i{X-TransactionId} %i{X-FromAppId} %i{X-Forwarded-For} %i{X-AAI-SSL-Client-CN} %i{X-AAI-SSL-Client-OU} %i{X-AAI-SSL-Client-O} %i{X-AAI-SSL-Client-L} %i{X-AAI-SSL-Client-ST} %i{X-AAI-SSL-Client-C} %i{X-AAI-SSL-Client-NotBefore} %i{X-AAI-SSL-Client-NotAfter} %i{X-AAI-SSL-Client-DN} %D</Pattern>
                    </encoder>
                </appender>
                <appender-ref ref="ACCESS" />
            </then>
        </if>

        <appender name="STDOUTACCESS" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="org.onap.aai.logging.CustomLogPatternLayoutEncoder">
                <Pattern>%a %u %z [%t] "%m %U%q" %s %b %y %i{X-TransactionId} %i{X-FromAppId} %i{X-Forwarded-For} %i{X-AAI-SSL-Client-CN} %i{X-AAI-SSL-Client-OU} %i{X-AAI-SSL-Client-O} %i{X-AAI-SSL-Client-L} %i{X-AAI-SSL-Client-ST} %i{X-AAI-SSL-Client-C} %i{X-AAI-SSL-Client-NotBefore} %i{X-AAI-SSL-Client-NotAfter} %i{X-AAI-SSL-Client-DN} %D - "logType": "access"</Pattern>
            </encoder>
        </appender>
        <appender-ref ref="STDOUTACCESS" />
    </configuration>

    <!--
    %a - Remote IP address
    %A - Local IP address
    %b - Bytes sent, excluding HTTP headers, or '-' if no bytes were sent
    %B - Bytes sent, excluding HTTP headers
    %h - Remote host name
    %H - Request protocol
    %l - Remote logical username from identd (always returns '-')
    %m - Request method
    %p - Local port
    %q - Query string (prepended with a '?' if it exists, otherwise an empty string
    %r - First line of the request
    %s - HTTP status code of the response
    %S - User session ID
    %t - Date and time, in Common Log Format format
    %u - Remote user that was authenticated
    %U - Requested URL path
    %v - Local server name
    %I - current request thread name (can compare later with stacktraces)

    %z - Custom pattern that parses the cert for the subject
    %y - Custom pattern determines rest or dme2
     -->
  janusgraph-realtime.properties: |2


    query.fast-property=true
    query.smart-limit=false



    storage.backend=cql
    storage.hostname=cassandra
    storage.cql.keyspace=aaigraph
    storage.username=cassandra
    storage.password=cassandra

    storage.cql.read-consistency-level=LOCAL_QUORUM
    storage.cql.write-consistency-level=LOCAL_QUORUM
    storage.cql.replication-factor=1
    storage.cql.only-use-local-consistency-for-system-operations=true



    storage.lock.wait-time=300
    # Setting db-cache to false ensure the fastest propagation of changes across servers
    cache.db-cache = false
    #load graphson file on startup
    load.snapshot.file=false
  janusgraph-cached.properties: |2


    query.fast-property=true
    query.smart-limit=false



    storage.backend=cql
    storage.hostname=cassandra
    storage.cql.keyspace=aaigraph
    storage.username=cassandra
    storage.password=cassandra

    storage.cql.read-consistency-level=LOCAL_QUORUM
    storage.cql.write-consistency-level=LOCAL_QUORUM
    storage.cql.replication-factor=1
    storage.cql.only-use-local-consistency-for-system-operations=true



    storage.lock.wait-time=300
    #caching on
    cache.db-cache = true
    cache.db-cache-clean-wait = 20
    cache.db-cache-time = 180000
    cache.db-cache-size = 0.3

    #load graphson file on startup
    load.snapshot.file=false
  realm.properties: |
    AAI:OBF:1gfr1ev31gg7,admin
    MSO:OBF:1jzx1lz31k01,admin
    SDNC:OBF:1itr1i0l1i151isv,admin
    DCAE:OBF:1g8u1f9d1f991g8w,admin
    POLICY:OBF:1mk61i171ima1im41i0j1mko,admin
    ASDC:OBF:1f991j0u1j001f9d,admin
    VID:OBF:1jm91i0v1jl9,admin
    APPC:OBF:1f991ksf1ksf1f9d,admin
    ModelLoader:OBF:1qvu1v2h1sov1sar1wfw1j7j1wg21saj1sov1v1x1qxw,admin
    AaiUI:OBF:1gfr1p571unz1p4j1gg7,admin
    OOF:OBF:1img1ke71ily,admin
    aai@aai.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    so@so.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdnc@sdnc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    dcae@dcae.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    policy@policy.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdc@sdc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vid@vid.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    appc@appc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    oof@oof.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    pomba@pomba.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vfc@vfc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
---
# Source: aai/charts/aai-graphadmin/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-graphadmin-properties
  namespace: amcop-system
  labels:
    app: aai-graphadmin
    chart: aai-graphadmin-11.0.0
    release: dev
    heritage: Helm
data:
  aaiconfig.properties: |2


    aai.config.checktime=1000

    # this could come from siteconfig.pl?
    aai.config.nodename=AutomaticallyOverwritten


    aai.server.url.base=http://aai.amcop-system/aai/
    aai.server.url=http://aai.amcop-system/aai/v23/
    aai.global.callback.url=http://aai.amcop-system/aai/



    aai.tools.enableBasicAuth=true
    aai.tools.username=AAI
    aai.tools.password=AAI




    aai.notification.current.version=v23
    aai.notificationEvent.default.status=UNPROCESSED
    aai.notificationEvent.default.eventType=AAI-EVENT
    aai.notificationEvent.default.domain=dev
    aai.notificationEvent.default.sourceName=aai
    aai.notificationEvent.default.sequenceNumber=0
    aai.notificationEvent.default.severity=NORMAL
    aai.notificationEvent.default.version=v23
    # This one lets us enable/disable resource-version checking on updates/deletes
    aai.resourceversion.enableflag=true
    aai.logging.maxStackTraceEntries=10
    aai.default.api.version=v23

    # Used by Data Grooming
    aai.grooming.default.max.fix=150
    aai.grooming.default.sleep.minutes=7

    # Used by DupeTool
    aai.dupeTool.default.max.fix=25
    aai.dupeTool.default.sleep.minutes=7


    aai.model.proc.max.levels=50
    aai.edgeTag.proc.max.levels=50

    # Used by the ForceDelete tool
    aai.forceDel.protected.nt.list=cloud-region
    aai.forceDel.protected.edge.count=10
    aai.forceDel.protected.descendant.count=10

    #used by the dataGrooming and dataSnapshot cleanup tasks
    aai.cron.enable.datagroomingcleanup=true
    aai.cron.enable.datasnapshotcleanup=true
    aai.datagrooming.agezip=5
    aai.datagrooming.agedelete=30

    aai.datasnapshot.agezip=5
    aai.datasnapshot.agedelete=30

    #used by the dataSnapshot and dataGrooming tasks
    aai.cron.enable.dataSnapshot=true

    aai.cron.enable.dataGrooming=true

    #used by the dataGrooming tasks
    aai.datagrooming.enableautofix=true
    aai.datagrooming.enabledupefixon=true
    aai.datagrooming.enabledontfixorphans=true
    aai.datagrooming.enabletimewindowminutes=true
    aai.datagrooming.enableskiphostcheck=false
    aai.datagrooming.enablesleepminutes=false
    aai.datagrooming.enableedgesonly=false
    aai.datagrooming.enableskipedgechecks=false
    aai.datagrooming.enablemaxfix=false
    aai.datagrooming.enablesinglecommits=false
    aai.datagrooming.enabledupecheckoff=false
    aai.datagrooming.enableghost2checkoff=false
    aai.datagrooming.enableghost2fixon=false
    aai.datagrooming.enablef=false

    # used by the dataGrooming to set values
    aai.datagrooming.timewindowminutesvalue=10500
    aai.datagrooming.sleepminutesvalue=100
    aai.datagrooming.maxfixvalue=10
    aai.datagrooming.fvalue=10

    #timeout for traversal enabled flag
    aai.graphadmin.timeoutenabled=true
    #default timeout limit added for graphadmin if not overridden (in ms)
    aai.graphadmin.timeoutlimit=180000

    #timeout app specific -1 to bypass for that app id, a whole number to override the timeout with that value (in ms)
    aai.graphadmin.timeout.appspecific=SDNC,MSO,SO,robot-ete

    # Disable the process check which are oriented towards linux OS
    # These props should only be true for local on windows
    aai.disable.check.snapshot.running=false
    aai.disable.check.grooming.running=false

    # Specify the params listed right here that you would have send to the dataSnapshot shell script
    # JUST_TAKE_SNAPSHOT
    # THREADED_SNAPSHOT 2 DEBUG
    # THREADED_SNAPSHOT 2
    aai.datasnapshot.params=JUST_TAKE_SNAPSHOT

    # Concurrency lock control flag
    aai.lock.uri.enabled=false

    aai.jms.enable=false
  application.properties: |2-

    info.build.artifact=aai-graphadmin
    info.build.name=resources
    info.build.description=Resources Microservice
    info.build.version=1.2.0

    spring.application.name=aai-graphadmin
    spring.jersey.type=filter

    spring.main.allow-bean-definition-overriding=true
    server.servlet.context-path=/

    spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

    spring.profiles.active=dmaap
    spring.jersey.application-path=${schema.uri.base.path}
    #The max number of active threads in this pool
    server.tomcat.max-threads=200
    #The minimum number of threads always kept alive
    server.tomcat.min-Spare-Threads=25
    #The number of milliseconds before an idle thread shutsdown, unless the number of active threads are less or equal to minSpareThreads
    server.tomcat.max-idle-time=60000

    # If you get an application startup failure that the port is already taken
    # If thats not it, please check if the key-store file path makes sense
    server.local.startpath=/opt/app/aai-graphadmin/resources/
    server.basic.auth.location=${server.local.startpath}etc/auth/realm.properties

    server.port=8449

    security.require-ssl=false
    server.ssl.enabled=false


    # JMS bind address host port
    jms.bind.address=tcp://localhost:61649
    dmaap.ribbon.listOfServers=message-router.amcop-system:3904
    dmaap.ribbon.transportType=http

    # Schema related attributes for the oxm and edges
    # Any additional schema related attributes should start with prefix schema
    schema.configuration.location=N/A
    schema.source.name=onap
    schema.nodes.location=${server.local.startpath}/schema/${schema.source.name}/oxm/
    schema.edges.location=${server.local.startpath}/schema/${schema.source.name}/dbedgerules/

    schema.ingest.file=${server.local.startpath}/application.properties

    # Schema Version Related Attributes

    schema.uri.base.path=/aai
    # Lists all of the versions in the schema
    schema.version.list=v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27
    # Specifies from which version should the depth parameter to default to zero
    schema.version.depth.start=v11
    # Specifies from which version should the related link be displayed in response payload
    schema.version.related.link.start=v11

    # Specifies from which version should the client see only the uri excluding host info
    # Before this version server base will also be included
    schema.version.app.root.start=v11
    # Specifies from which version should the namespace be changed
    schema.version.namespace.change.start=v12
    # Specifies from which version should the client start seeing the edge label in payload
    schema.version.edge.label.start=v12
    # Specifies the version that the application should default to
    schema.version.api.default=v23

    schema.translator.list=schema-service
    schema.service.base.url=http://aai-schema-service.amcop-system:8452/aai/schema-service/v1/
    schema.service.nodes.endpoint=nodes?version=
    schema.service.edges.endpoint=edgerules?version=
    schema.service.versions.endpoint=versions
    schema.service.client=no-auth



    aperture.rdbmsname=aai_relational

    aperture.service.client=no-auth

    aperture.service.base.url=http://localhost:8457/aai/aperture

    aperture.service.timeout-in-milliseconds=300000

    #To Expose the Prometheus scraping endpoint
    management.port=8448
    endpoints.enabled=false
    management.security.enabled=false
---
# Source: aai/charts/aai-resources/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-resources
  namespace: amcop-system
  labels:
    app: aai-resources
    chart: aai-resources-11.0.0
    release: dev
    heritage: Helm
data:
  logback.xml: |2-

    <configuration scan="true" scanPeriod="60 seconds" debug="false">
      <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

      <property resource="application.properties" />

      <property name="maxHistory" value='7' />
      <property name="totalSizeCap" value='1GB' />
      <property name="queueSize" value='1000'/>

      <property name="logToFileEnabled" value='true'/>

      <property name="namespace" value="aai-resources"/>

      <property name="AJSC_HOME" value="${AJSC_HOME:-.}" />
      <jmxConfigurator />
      <property name="logDirectory" value="${AJSC_HOME}/logs" />
      <!-- Old patterns
      <property name="eelfLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      <property name="eelfAuditLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      <property name="eelfMetricLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{targetVirtualEntity}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      <property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%ecompServiceName|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%ecompResponseCode|%ecompResponseDescription|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfTransLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{partnerName}:%m%n"/>
        -->
      <property name="p_tim" value="%d{&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, UTC}"/>
      <property name="p_lvl" value="%level"/>
      <property name="p_log" value="%logger"/>
      <property name="p_mdc" value="%replace(%replace(%replace(%mdc){'\t','\\\\t'}){'\n', '\\\\n'}){'\\|', '!'}"/>
      <property name="p_msg" value="%replace(%replace(%msg){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_exc" value="%replace(%replace(%rootException){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_mak" value="%replace(%replace(%marker){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_thr" value="%thread"/>
      <property name="pattern" value="%nopexception${p_tim}\t${p_thr}\t${p_lvl}\t${p_log}\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t%n"/>
      <!-- Patterns from onap demo -->
      <property name="errorPattern" value="%X{LogTimestamp}|%X{RequestID}|%thread|%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{TargetEntity}|%replace(%X{TargetServiceName}){'\\|', '!'}|%.-5level|%X{ErrorCode}|%X{ErrorDesc}|%msg%n" />
      <property name="debugPattern" value="%X{LogTimestamp}|%X{RequestID}|%msg\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t|^%n" />
      <property name="auditPattern" value="%X{EntryTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||${p_mak}|${p_mdc}|||%msg%n" />
      <property name="metricPattern" value="%X{InvokeTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{TargetEntity}|%replace(%X{TargetServiceName}){'\\|', '!'}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||%X{TargetVirtualEntity}|${p_mak}|${p_mdc}|||%msg%n" />
      <property name="transLogPattern" value="%X{LogTimestamp}|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{RequestID}|%X{ServiceInstanceID}|%-10t|%X{ServerFQDN}|%X{ServiceName}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%replace(%replace(%X{ResponseDesc}){'\\|', '!'}){'\r|\n', '^'}|%X{InstanceUUID}|%level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{clientIpAddress}||%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{PartnerName}:%m%n"/>
      <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
      <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
      <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

      <if condition='property("logToFileEnabled").contains("true")'>
        <then>
          <appender name="SANE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/sane.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/sane.log.%d{yyyy-MM-dd}.zip</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{1024} - %msg%n
              </pattern>
            </encoder>
          </appender>

          <appender name="asyncSANE" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="SANE"/>
          </appender>
          <appender name="METRIC" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/metrics.log</file>
            <rollingPolicy
                    class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/metrics.log.%d{yyyy-MM-dd}.zip</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${metricPattern}</pattern>
            </encoder>
          </appender>

          <appender name="asyncMETRIC" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="METRIC"/>
          </appender>

          <appender name="DEBUG"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>DEBUG</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <file>${logDirectory}/rest/debug.log</file>
            <rollingPolicy
                    class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/debug.log.%d{yyyy-MM-dd}.zip</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${debugPattern}</pattern>
            </encoder>
          </appender>

          <appender name="asyncDEBUG" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <appender-ref ref="DEBUG"/>
            <includeCallerData>true</includeCallerData>
          </appender>
          <appender name="ERROR"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/error.log</file>
            <rollingPolicy
                    class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/error.log.%d{yyyy-MM-dd}.zip</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>WARN</level>
            </filter>
            <encoder>
              <pattern>${errorPattern}</pattern>
            </encoder>
          </appender>

          <appender name="asyncERROR" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <appender-ref ref="ERROR"/>
          </appender>

          <appender name="AUDIT"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/audit.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/audit.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${auditPattern}</pattern>
            </encoder>
          </appender>

          <appender name="asyncAUDIT" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="AUDIT"/>
          </appender>

          <appender name="translog"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>DEBUG</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <file>${logDirectory}/rest/translog.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/translog.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${transLogPattern}</pattern>
            </encoder>
          </appender>

          <appender name="asynctranslog" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="translog"/>
          </appender>

          <appender name="dmaapAAIEventConsumer"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>WARN</level>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/error.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/error.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${errorPattern}</pattern>
            </encoder>

          </appender>

          <appender name="dmaapAAIEventConsumerDebug"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>DEBUG</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/debug.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/debug.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${debugPattern}</pattern>
            </encoder>
          </appender>
          <appender name="dmaapAAIEventConsumerInfo"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>INFO</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/dmaap-transaction.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/dmaap-transaction.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${auditPattern}</pattern>
            </encoder>
          </appender>
          <appender name="dmaapAAIEventConsumerMetric"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>INFO</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/metrics.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/metrics.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${metricPattern}</pattern>
            </encoder>
          </appender>
          <appender name="external"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>WARN</level>
            </filter>
            <file>${logDirectory}/external/external.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/external/external.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${debugPattern}</pattern>
            </encoder>
          </appender>
          <appender name="auth"
                    class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>DEBUG</level>
            </filter>
            <file>${logDirectory}/auth/auth.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/auth/auth.log.%d{yyyy-MM-dd}.zip
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}[%thread] %-5level %logger{1024} - %msg%n</pattern>
            </encoder>
          </appender>
          <appender name="asyncAUTH" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="auth"/>
          </appender>
        </then>
      </if>

      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
          <providers>
            <timestamp><fieldName>timestamp</fieldName></timestamp>
            <message/>
            <mdc>
              <fieldName>context</fieldName>
              <excludeMdcKeyName>ServerIPAddress</excludeMdcKeyName>
              <excludeMdcKeyName>EntryTimestamp</excludeMdcKeyName>
              <excludeMdcKeyName>InvokeTimestamp</excludeMdcKeyName>
              <excludeMdcKeyName>ErrorCode</excludeMdcKeyName>
              <excludeMdcKeyName>ErrorDesc</excludeMdcKeyName>
            </mdc>
            <stackTrace>
              <fieldName>exception</fieldName>
              <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                <exclude>^sun\.reflect\..*\.invoke</exclude>
                <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                <rootCauseFirst>true</rootCauseFirst>
              </throwableConverter>
            </stackTrace>
            <threadName><fieldName>thread</fieldName></threadName>
            <loggerName>
              <fieldName>logger</fieldName>
              <shortenedLoggerNameLength>36</shortenedLoggerNameLength>
            </loggerName>
            <logLevel/>
            <pattern>
              <pattern>{"logType":"app"}</pattern>
            </pattern>
          </providers>
        </encoder>
      </appender>

      <!-- logback internals logging -->

      <logger name="ch.qos.logback.classic" level="WARN" />
      <logger name="ch.qos.logback.core" level="WARN" />

      <logger name="com.att.aft.dme2" level="WARN" />
      <logger name="com.jayway.jsonpath" level="WARN" />

      <logger name="org.apache" level="OFF" />
      <logger name="org.apache.commons" level="WARN" />
      <logger name="org.apache.zookeeper" level="OFF" />
      <logger name="org.codehaus.groovy" level="WARN" />
      <logger name="org.eclipse.jetty" level="WARN" />
      <!-- Spring related loggers -->
      <logger name="org.springframework" level="WARN" />
      <logger name="org.springframework.beans" level="WARN" />
      <logger name="org.springframework.web" level="WARN" />
      <logger name="org.janusgraph" level="WARN" />
      <logger name="org.zookeeper" level="OFF" />


      <logger name="org.onap.aai" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncDEBUG"/>
            <appender-ref ref="asyncSANE"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.aaf.auth" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncAUTH"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>

      <if condition='property("logToFileEnabled").contains("true")'>
        <then>
          <!-- These loggers are not additive and will be redirected to the parent logger.
            Sending events to log is handled by parent loggers-->
          <logger name="org.onap.aai.aailog.logs.AaiScheduledTaskAuditLog" level="INFO">
            <appender-ref ref="asyncAUDIT"/>
          </logger>
          <logger name="org.onap.logging.filter.base.AbstractAuditLogFilter" level="INFO">
            <appender-ref ref="asyncAUDIT"/>
          </logger>
          <logger name="org.onap.aai.aailog.logs.AaiDBMetricLog" level="INFO">
            <appender-ref ref="asyncMETRIC"/>
          </logger>
          <logger name="org.onap.aai.aailog.logs.AaiDmaapMetricLog" level="INFO">
            <appender-ref ref="dmaapAAIEventConsumerMetric"/>
          </logger>
          <logger name="org.onap.aai.logging.ErrorLogHelper" level="WARN">
            <appender-ref ref="asyncERROR"/>
          </logger>
          <logger name="com.att.nsa.mr" level="INFO">
            <appender-ref ref="dmaapAAIEventConsumerInfo"/>
          </logger>
        </then>
      </if>

      <logger name="org.onap.aai.interceptors.post" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asynctranslog"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>

      <logger name="org.onap.aai.dmaap" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dmaapAAIEventConsumer"/>
            <appender-ref ref="dmaapAAIEventConsumerDebug"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </logger>

      <root level="DEBUG">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="external"/>
          </then>
        </if>
        <appender-ref ref="STDOUT"/>
      </root>
    </configuration>
  localhost-access-logback.xml: "\r\n<configuration>\r\n  <property name=\"AJSC_HOME\" value=\"${AJSC_HOME:-.}\" />\r\n\r\n  <property name=\"logToFileEnabled\" value='true'/>\r\n  <property name=\"maxHistory\" value='7' />\r\n  <property name=\"totalSizeCap\" value='1GB' />\r\n\r\n  <if condition='property(\"logToFileEnabled\").contains(\"true\")'>\r\n    <then>\r\n      <appender name=\"ACCESS\"\r\n                class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <file>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log</file>\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n          <fileNamePattern>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log.%d{yyyy-MM-dd}.zip\r\n          </fileNamePattern>\r\n          <maxHistory>${maxHistory}</maxHistory>\r\n          <totalSizeCap>${totalSizeCap}</totalSizeCap>\r\n        </rollingPolicy>\r\n        <encoder class=\"org.onap.aai.logging.CustomLogPatternLayoutEncoder\">\r\n          <Pattern>%a %u %z [%t] \"%m %U%q\" %s %b %y %i{X-TransactionId} %i{X-FromAppId} %i{X-Forwarded-For} %i{X-AAI-SSL-Client-CN} %i{X-AAI-SSL-Client-OU} %i{X-AAI-SSL-Client-O} %i{X-AAI-SSL-Client-L} %i{X-AAI-SSL-Client-ST} %i{X-AAI-SSL-Client-C} %i{X-AAI-SSL-Client-NotBefore} %i{X-AAI-SSL-Client-NotAfter} %i{X-AAI-SSL-Client-DN} %D</Pattern>\r\n        </encoder>\r\n      </appender>\r\n      <appender-ref ref=\"ACCESS\"/>\r\n    </then>\r\n  </if>\r\n\r\n  <appender name=\"STDOUTACCESS\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n    <encoder class=\"org.onap.aai.logging.CustomLogPatternLayoutEncoder\">\r\n      <Pattern>%a %u %z [%t] \"%m %U%q\" %s %b %y %i{X-TransactionId} %i{X-FromAppId} %i{X-Forwarded-For} %i{X-AAI-SSL-Client-CN} %i{X-AAI-SSL-Client-OU} %i{X-AAI-SSL-Client-O} %i{X-AAI-SSL-Client-L} %i{X-AAI-SSL-Client-ST} %i{X-AAI-SSL-Client-C} %i{X-AAI-SSL-Client-NotBefore} %i{X-AAI-SSL-Client-NotAfter} %i{X-AAI-SSL-Client-DN} %D - \"logType\": \"access\"</Pattern>\r\n    </encoder>\r\n  </appender>\r\n\r\n  <appender-ref ref=\"STDOUTACCESS\" />\r\n\r\n</configuration>\r\n\r\n\r\n"
  janusgraph-realtime.properties: |2


    query.fast-property=true
    query.smart-limit=false



    storage.backend=cql
    storage.hostname=cassandra
    storage.cql.keyspace=aaigraph
    storage.username=cassandra
    storage.password=cassandra

    storage.cql.read-consistency-level=LOCAL_QUORUM
    storage.cql.write-consistency-level=LOCAL_QUORUM
    storage.cql.replication-factor=1
    storage.cql.only-use-local-consistency-for-system-operations=true



    storage.lock.wait-time=300
    # Setting db-cache to false ensure the fastest propagation of changes across servers
    cache.db-cache = false
    #load graphson file on startup
    load.snapshot.file=false
  janusgraph-cached.properties: |2


    query.fast-property=true
    query.smart-limit=false



    storage.backend=cql
    storage.hostname=cassandra
    storage.cql.keyspace=aaigraph
    storage.username=cassandra
    storage.password=cassandra

    storage.cql.read-consistency-level=LOCAL_QUORUM
    storage.cql.write-consistency-level=LOCAL_QUORUM
    storage.cql.replication-factor=1
    storage.cql.only-use-local-consistency-for-system-operations=true



    storage.lock.wait-time=300
    #caching on
    cache.db-cache = true
    cache.db-cache-clean-wait = 20
    cache.db-cache-time = 180000
    cache.db-cache-size = 0.3

    #load graphson file on startup
    load.snapshot.file=false
  aaiconfig.properties: |2


    aai.config.checktime=1000

    # this could come from siteconfig.pl?
    aai.config.nodename=AutomaticallyOverwritten


    aai.server.url.base=http://aai.amcop-system/aai/
    aai.server.url=http://aai.amcop-system/aai/v23/
    aai.global.callback.url=http://aai.amcop-system/aai/



    aai.tools.enableBasicAuth=true
    aai.tools.username=AAI
    aai.tools.password=AAI




    aai.notification.current.version=v23
    aai.notificationEvent.default.status=UNPROCESSED
    aai.notificationEvent.default.eventType=AAI-EVENT
    aai.notificationEvent.default.domain=dev
    aai.notificationEvent.default.sourceName=aai
    aai.notificationEvent.default.sequenceNumber=0
    aai.notificationEvent.default.severity=NORMAL
    aai.notificationEvent.default.version=v23
    # This one lets us enable/disable resource-version checking on updates/deletes
    aai.resourceversion.enableflag=true
    aai.logging.maxStackTraceEntries=10
    aai.default.api.version=v23

    aai.logging.trace.enabled=true
    aai.logging.trace.logrequest=false
    aai.logging.trace.logresponse=false

    aai.transaction.logging=true
    aai.transaction.logging.get=false
    aai.transaction.logging.post=true

    aai.realtime.clients=SDNC,MSO,SO,robot-ete

    # Timeout for crud enabled flag
    aai.crud.timeoutenabled=true

    # Timeout app specific -1 to bypass for that app id, a whole number to override the timeout with that value (in ms)
    aai.crud.timeout.appspecific=JUNITTESTAPP1,1|JUNITTESTAPP2,-1|DCAE-CCS,-1|DCAES,-1|AAIRctFeed,-1|NewvceCreator,-1|IANewvceCreator,-1|AAI-CSIOVALS,-1

    #default timeout limit added for crud if not overridden (in ms)
    aai.crud.timeoutlimit=100000
    #limit set for bulk consumer APIS
    aai.bulkconsumer.payloadlimit=30

    #uncomment and use header X-OverrideLimit with the value to override the bulk api limit
    aai.bulkconsumer.payloadoverride=false

    #
    # AAI Graph DB checker task
    #

    # Indicator to enable or disable scheduled task (true/false)
    aai.graph.checker.task.enabled=true

    # Delay, in seconds, before the scheduled task is started, if enabled
    aai.graph.checker.task.delay=5

    # Period, in seconds, between two consecutive executions of the scheduled task, if enabled
    aai.graph.checker.task.period=10

    aai.jms.enable=false
  application.properties: |2-

    info.build.artifact=aai-resources
    info.build.name=resources
    info.build.description=Resources Microservice
    info.build.version=1.3.0

    spring.application.name=aai-resources
    spring.jersey.type=filter

    spring.main.allow-bean-definition-overriding=true
    server.servlet.context-path=/

    spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,org.keycloak.adapters.springboot.KeycloakAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration

    spring.profiles.active=production
    spring.jersey.application-path=${schema.uri.base.path}
    #The max number of active threads in this pool
    server.tomcat.max-threads=200
    #The minimum number of threads always kept alive
    server.tomcat.min-Spare-Threads=25
    #The number of milliseconds before an idle thread shutsdown, unless the number of active threads are less or equal to minSpareThreads
    server.tomcat.max-idle-time=60000

    # If you get an application startup failure that the port is already taken
    # If thats not it, please check if the key-store file path makes sense
    server.local.startpath=aai-resources/src/main/resources/
    server.basic.auth.location=${server.local.startpath}etc/auth/realm.properties

    server.port=8447

    security.require-ssl=false
    server.ssl.enabled=false


    # JMS bind address host port
    jms.bind.address=tcp://localhost:61647
    dmaap.ribbon.listOfServers=message-router.amcop-system:3904
    dmaap.ribbon.transportType=http

    # Schema related attributes for the oxm and edges
    # Any additional schema related attributes should start with prefix schema
    schema.configuration.location=N/A
    schema.source.name=onap
    schema.nodes.location=${server.local.startpath}/schema/${schema.source.name}/oxm/
    schema.edges.location=${server.local.startpath}/schema/${schema.source.name}/dbedgerules/

    schema.ingest.file=${server.local.startpath}/application.properties

    # Schema Version Related Attributes

    schema.uri.base.path=/aai
    # Lists all of the versions in the schema
    schema.version.list=v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27
    # Specifies from which version should the depth parameter to default to zero
    schema.version.depth.start=v11
    # Specifies from which version should the related link be displayed in response payload
    schema.version.related.link.start=v11

    # Specifies from which version should the client see only the uri excluding host info
    # Before this version server base will also be included
    schema.version.app.root.start=v11
    # Specifies from which version should the namespace be changed
    schema.version.namespace.change.start=v12
    # Specifies from which version should the client start seeing the edge label in payload
    schema.version.edge.label.start=v12
    # Specifies the version that the application should default to
    schema.version.api.default=v23

    schema.translator.list=schema-service
    schema.service.base.url=http://aai-schema-service.amcop-system:8452/aai/schema-service/v1/
    schema.service.nodes.endpoint=nodes?version=
    schema.service.edges.endpoint=edgerules?version=
    schema.service.versions.endpoint=versions
    schema.service.client=no-auth



    #to expose the Prometheus scraping endpoint
    management.port=8448
    management.endpoints.enabled-by-default=false
    management.security.enabled=false
    endpoints.enabled=false
    endpoints.info.enabled=false
    endpoints.prometheus.enabled=false
    endpoints.health.enabled=false
    management.metrics.web.server.auto-time-requests=false
    management.metrics.distribution.percentiles-histogram[http.server.requests]=true
    management.metrics.distribution.sla[http.server.requests]=20ms, 30ms, 40ms, 50ms, 60ms, 70ms, 80ms, 90ms, 100ms, 500ms, 1000ms, 5000ms, 7000ms
    #Add common tag for grouping all aai related metrics
    management.metrics.tags.group_id=aai
    #It is not advisable to use labels to store dimensions with high cardinality. Enable this option only for debug purposes. For more information: https://github.com/micrometer-metrics/micrometer/issues/1584
    scrape.uri.metrics=false
  application-keycloak.properties: |2-

    spring.autoconfigure.exclude=\
      org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
      org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

    multi.tenancy.enabled=true
    keycloak.auth-server-url=http://keycloak.your.domain:8180/auth
    keycloak.realm=aai-resources
    keycloak.resource=aai-resources-app
    keycloak.public-client=true
    keycloak.principal-attribute=preferred_username

    keycloak.ssl-required=external
    keycloak.bearer-only=true
  realm.properties: |
    AAI:OBF:1gfr1ev31gg7,admin
    MSO:OBF:1jzx1lz31k01,admin
    SDNC:OBF:1itr1i0l1i151isv,admin
    DCAE:OBF:1g8u1f9d1f991g8w,admin
    POLICY:OBF:1mk61i171ima1im41i0j1mko,admin
    ASDC:OBF:1f991j0u1j001f9d,admin
    VID:OBF:1jm91i0v1jl9,admin
    APPC:OBF:1f991ksf1ksf1f9d,admin
    ModelLoader:OBF:1qvu1v2h1sov1sar1wfw1j7j1wg21saj1sov1v1x1qxw,admin
    AaiUI:OBF:1gfr1p571unz1p4j1gg7,admin
    OOF:OBF:1img1ke71ily,admin
    aai@aai.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    so@so.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdnc@sdnc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    dcae@dcae.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    policy@policy.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdc@sdc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vid@vid.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    appc@appc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    oof@oof.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    pomba@pomba.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vfc@vfc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
---
# Source: aai/charts/aai-resources/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-resources-aaf-props
  namespace: amcop-system
  labels:
    app: aai-resources
    chart: aai-resources-11.0.0
    release: dev
    heritage: Helm
data:
  org.osaaf.location.props: |+
    ##
    ## org.osaaf.location.props
    ##
    ## Localized Machine Information
    ##
    # Almeda California ?
    cadi_latitude=37.78187
    cadi_longitude=-122.26147

    # Locate URL (which AAF Env)
    aaf_locate_url=https://aaf-locate.onap:8095


    # AAF URL
    aaf_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.service:2.1

    # AAF Environment Designation
    aaf_env=DEV

    # OAuth2 Endpoints
    aaf_oauth2_token_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.token:2.1/token
    aaf_oauth2_introspect_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.introspect:2.1/introspect


  permissions.properties: |-
    permission.type=org.onap.aai.resources
    permission.instance=*
  org.onap.aai.props: |
    ############################################################
    # Properties Generated by AT&T Certificate Manager
    # @copyright 2016, AT&T
    # Modifications Copyright © 2020 Orange
    ############################################################
    cadi_x509_issuers=CN=intermediateCA_1, OU=OSAAF, O=ONAP, C=US:CN=intermediateCA_7, OU=OSAAF, O=ONAP, C=US:CN=intermediateCA_9, OU=OSAAF, O=ONAP, C=US
    cadi_keyfile=/opt/app/osaaf/local/org.onap.aai-resources.keyfile
    cadi_keystore=/opt/app/osaaf/local/org.onap.aai-resources.p12
    cadi_keystore_password=${KEYSTORE_PASSWORD}

    cadi_alias=aai@aai.onap.org
    cadi_truststore=/opt/app/osaaf/local/truststoreONAPall.jks
    cadi_truststore_password=${TRUSTSTORE_ALL_PASSWORD}
    cadi_loglevel=INFO
    cadi_bath_convert=/opt/app/aai-resources/resources/aaf/bath_config.csv
  cadi.properties: |2

    cadi_loglevel=INFO
    cadi_prop_files=/opt/app/aai-resources/resources/aaf/org.osaaf.location.props:/opt/app/aai-resources/resources/aaf/org.onap.aai.props

    # OAuth2
    aaf_oauth2_token_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.token:2.1/token
    aaf_oauth2_introspect_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.introspect:2.1/introspect
---
# Source: aai/charts/aai-schema-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-schema-service-log
  namespace: amcop-system
  labels:
    app: aai-schema-service
    chart: aai-schema-service-11.0.0
    release: dev
    heritage: Helm
data:
  logback.xml: |2

    <configuration scan="true" scanPeriod="60 seconds" debug="false">
      <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

      <property resource="application.properties"/>

      <property name="namespace" value="aai-schema-service"/>

      <property name="AJSC_HOME" value="${AJSC_HOME:-.}"/>
      <property name="logDirectory" value="${AJSC_HOME}/logs"/>
      <!-- Old patterns
      <property name="eelfLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      <property name="eelfAuditLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      <property name="eelfMetricLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{targetVirtualEntity}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      //<property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%ecompServiceName|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      <property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%ecompServiceName|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%ecompResponseCode|%ecompResponseDescription|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
      <property name="eelfTransLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{partnerName}:%m%n"/>
      -->
      <property name="p_tim" value="%d{&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, UTC}"/>
      <property name="p_lvl" value="%level"/>
      <property name="p_log" value="%logger"/>
      <property name="p_mdc" value="%replace(%replace(%replace(%mdc){'\t','\\\\t'}){'\n', '\\\\n'}){'\\|', '!'}"/>
      <property name="p_msg" value="%replace(%replace(%msg){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_exc" value="%replace(%replace(%rootException){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_mak" value="%replace(%replace(%marker){'\t', '\\\\t'}){'\n','\\\\n'}"/>
      <property name="p_thr" value="%thread"/>
      <property name="pattern" value="%nopexception${p_tim}\t${p_thr}\t${p_lvl}\t${p_log}\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t%n"/>
      <!-- Patterns from onap demo -->
      <property name="errorPattern" value="%X{LogTimestamp}|%X{RequestID}|%thread|%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{TargetEntity}|%replace(%X{TargetServiceName}){'\\|', '!'}|%.-5level|%X{ErrorCode}|%X{ErrorDesc}|%msg%n" />
      <property name="debugPattern" value="%X{LogTimestamp}|%X{RequestID}|%msg\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t|^%n" />

      <property name="auditPattern" value="%X{EntryTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||${p_mak}|${p_mdc}|||%msg%n" />
      <property name="metricPattern" value="%X{InvokeTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{TargetEntity}|%replace(%X{TargetServiceName}){'\\|', '!'}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||%X{TargetVirtualEntity}|${p_mak}|${p_mdc}|||%msg%n" />
      <property name="transLogPattern" value="%X{LogTimestamp}|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{RequestID}|%X{ServiceInstanceID}|%-10t|%X{ServerFQDN}|%X{ServiceName}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%replace(%replace(%X{ResponseDesc}){'\\|', '!'}){'\r|\n', '^'}|%X{InstanceUUID}|%level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{clientIpAddress}||%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{PartnerName}:%m%n"/>

      <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
      <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
      <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <pattern>
            %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
          </pattern>
        </encoder>
      </appender>

      <appender name="SANE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDirectory}/rest/sane.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/rest/sane.log.%d{yyyy-MM-dd}</fileNamePattern>
        </rollingPolicy>
        <encoder>
          <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{1024} - %msg%n
          </pattern>
        </encoder>
      </appender>

      <appender name="asyncSANE" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="SANE"/>
      </appender>

      <appender name="METRIC" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDirectory}/rest/metrics.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/rest/metrics.log.%d{yyyy-MM-dd}</fileNamePattern>
        </rollingPolicy>
        <encoder>
          <pattern>${metricPattern}</pattern>
        </encoder>
      </appender>
      <appender name="asyncMETRIC" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="METRIC"/>
      </appender>

      <appender name="DEBUG"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
          <level>DEBUG</level>
          <onMatch>ACCEPT</onMatch>
          <onMismatch>DENY</onMismatch>
        </filter>
        <file>${logDirectory}/rest/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/rest/debug.log.%d{yyyy-MM-dd}
          </fileNamePattern>
        </rollingPolicy>
        <encoder>
          <pattern>${debugPattern}</pattern>
        </encoder>
      </appender>

      <appender name="asyncDEBUG" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <appender-ref ref="DEBUG"/>
        <includeCallerData>true</includeCallerData>
      </appender>

      <appender name="ERROR"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDirectory}/rest/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/rest/error.log.%d{yyyy-MM-dd}
          </fileNamePattern>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>WARN</level>
        </filter>
        <encoder>
          <pattern>${errorPattern}</pattern>
        </encoder>
      </appender>

      <appender name="asyncERROR" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <appender-ref ref="ERROR"/>
      </appender>

      <appender name="AUDIT"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDirectory}/rest/audit.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/rest/audit.log.%d{yyyy-MM-dd}
          </fileNamePattern>
        </rollingPolicy>
        <encoder>
          <pattern>${auditPattern}</pattern>
        </encoder>
      </appender>

      <appender name="asyncAUDIT" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="AUDIT"/>
      </appender>

      <appender name="translog"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
          <level>DEBUG</level>
          <onMatch>ACCEPT</onMatch>
          <onMismatch>DENY</onMismatch>
        </filter>
        <file>${logDirectory}/rest/translog.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/rest/translog.log.%d{yyyy-MM-dd}
          </fileNamePattern>
        </rollingPolicy>
        <encoder>
          <pattern>${transLogPattern}</pattern>
        </encoder>
      </appender>

      <appender name="asynctranslog" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="translog"/>
      </appender>

      <appender name="external"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>WARN</level>
        </filter>
        <file>${logDirectory}/external/external.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/external/external.log.%d{yyyy-MM-dd}
          </fileNamePattern>
        </rollingPolicy>
        <encoder>
          <pattern>${debugPattern}</pattern>
        </encoder>
      </appender>

      <appender name="auth"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>DEBUG</level>
        </filter>
        <file>${logDirectory}/auth/auth.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          <fileNamePattern>${logDirectory}/auth/auth.log.%d{yyyy-MM-dd}
          </fileNamePattern>
        </rollingPolicy>
        <encoder>
          <pattern>%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}[%thread] %-5level %logger{1024} - %msg%n</pattern>
        </encoder>
      </appender>
      <appender name="asyncAUTH" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1000</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="auth" />
      </appender>

      <logger name="org.onap.aai" level="DEBUG" additivity="false">
        <appender-ref ref="asyncDEBUG"/>
        <appender-ref ref="asyncSANE"/>
        <appender-ref ref="STDOUT"/>
      </logger>

      <!-- Spring related loggers -->
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.beans" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="com.blog.spring.jms" level="WARN"/>
      <logger name="com.jayway.jsonpath" level="WARN"/>

      <!-- AJSC related loggers (DME2 Registration, csi logging, restlet, servlet
        logging) -->
      <logger name="org.codehaus.groovy" level="WARN"/>
      <logger name="com.netflix.loadbalancer" level="WARN"/>

      <logger name="org.apache.zookeeper" level="OFF"/>

      <!-- Other Loggers that may help troubleshoot -->
      <logger name="net.sf" level="WARN"/>
      <logger name="org.apache.commons.httpclient" level="WARN"/>
      <logger name="org.apache.commons" level="WARN"/>
      <logger name="org.apache.coyote" level="WARN"/>
      <logger name="org.apache.jasper" level="WARN"/>

      <!-- Camel Related Loggers (including restlet/servlet/jaxrs/cxf logging.
        May aid in troubleshooting) -->
      <logger name="org.apache.camel" level="WARN"/>
      <logger name="org.apache.cxf" level="WARN"/>
      <logger name="org.apache.camel.processor.interceptor" level="WARN"/>
      <logger name="org.apache.cxf.jaxrs.interceptor" level="WARN"/>
      <logger name="org.apache.cxf.service" level="WARN"/>
      <logger name="org.restlet" level="WARN"/>
      <logger name="org.apache.camel.component.restlet" level="WARN"/>

      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb" level="OFF"/>

      <!-- logback internals logging -->
      <logger name="ch.qos.logback.classic" level="WARN"/>
      <logger name="ch.qos.logback.core" level="WARN"/>

      <logger name="org.eclipse.jetty" level="WARN"/>

      <logger name="org.onap.aai.aaf.auth" level="DEBUG" additivity="false">
        <appender-ref ref="asyncAUTH" />
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.aailog.logs.AaiScheduledTaskAuditLog" level="INFO">
        <appender-ref ref="asyncAUDIT"/>
        <appender-ref ref="STDOUT"/>
      </logger>

      <logger name="org.onap.logging.filter.base.AbstractAuditLogFilter" level="INFO">
        <appender-ref ref="asyncAUDIT"/>
        <appender-ref ref="STDOUT"/>
      </logger>

      <logger name="org.onap.aai.logging.ErrorLogHelper" level="WARN">
        <appender-ref ref="asyncERROR"/>
        <appender-ref ref="STDOUT"/>
      </logger>
      <logger name="org.onap.aai.schemaservice.interceptors.post" level="DEBUG" additivity="false">
        <appender-ref ref="asynctranslog" />
        <appender-ref ref="STDOUT"/>
      </logger>

      <logger name="org.apache" level="OFF"/>
      <logger name="org.zookeeper" level="OFF"/>
      <logger name="org.janusgraph" level="WARN"/>
      <logger name="com.att.aft.dme2" level="WARN"/>


      <root level="DEBUG">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="external"/>
      </root>
    </configuration>
---
# Source: aai/charts/aai-schema-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-schema-service-localhost-access-log
  namespace: amcop-system
  labels:
    app: aai-schema-service
    chart: aai-schema-service-11.0.0
    release: dev
    heritage: Helm
data:
  localhost-access-logback.xml: |2-

    <configuration>
        <property name="AJSC_HOME" value="${AJSC_HOME:-.}" />
        <appender name="ACCESS"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log.%d{yyyy-MM-dd}
                </fileNamePattern>
            </rollingPolicy>
            <encoder class="org.onap.aai.logging.CustomLogPatternLayoutEncoder">
                <Pattern>%a %u %z [%t] "%m %U%q" %s %b %y %i{X-TransactionId} %i{X-FromAppId} %i{X-Forwarded-For} %i{X-AAI-SSL-Client-CN} %i{X-AAI-SSL-Client-OU} %i{X-AAI-SSL-Client-O} %i{X-AAI-SSL-Client-L} %i{X-AAI-SSL-Client-ST} %i{X-AAI-SSL-Client-C} %i{X-AAI-SSL-Client-NotBefore} %i{X-AAI-SSL-Client-NotAfter} %i{X-AAI-SSL-Client-DN} %D</Pattern>
            </encoder>
        </appender>
        <appender-ref ref="ACCESS" />
    </configuration>
---
# Source: aai/charts/aai-schema-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-schema-service-aaiconfig
  namespace: amcop-system
  labels:
    app: aai-schema-service
    chart: aai-schema-service-11.0.0
    release: dev
    heritage: Helm
data:
  aaiconfig.properties: |2



    aai.server.url.base=http://aai.amcop-system/aai/
    aai.server.url=http://aai.amcop-system/aai/v23/
    aai.global.callback.url=http://aai.amcop-system/aai/



    aai.tools.enableBasicAuth=true
    aai.tools.username=AAI
    aai.tools.password=AAI




    aai.default.api.version=v23

    aai.logging.trace.enabled=true
    aai.logging.trace.logrequest=false
    aai.logging.trace.logresponse=false

    aai.transaction.logging=true
    aai.transaction.logging.get=false
    aai.transaction.logging.post=false

    aai.jms.enable=false
---
# Source: aai/charts/aai-schema-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-schema-service-springapp
  namespace: amcop-system
  labels:
    app: aai-schema-service
    chart: aai-schema-service-11.0.0
    release: dev
    heritage: Helm
data:
  application.properties: |2

    info.build.artifact=aai-schema-service
    info.build.name=schema-service
    info.build.description=Schema Service Microservice
    info.build.version=1.1.0

    spring.application.name=aai-schema-service
    spring.jersey.type=filter

    spring.main.allow-bean-definition-overriding=true
    server.servlet.context-path=/

    spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

    spring.jersey.application-path=${schema.uri.base.path}
    server.tomcat.max-threads=200
    server.tomcat.min-Spare-Threads=25
    server.tomcat.max-idle-time=60000

    server.local.startpath=aai-schema-service/src/main/resources/
    server.basic.auth.location=${server.local.startpath}/etc/auth/realm.properties

    server.port=8452

    security.require-ssl=false
    server.ssl.enabled=false


    schema.configuration.location=N/A
    schema.source.name=onap
    schema.nodes.location=${server.local.startpath}/schema/${schema.source.name}/oxm/
    schema.edges.location=${server.local.startpath}/schema/${schema.source.name}/dbedgerules/
    schema.query.location=${server.local.startpath}/schema/${schema.source.name}/query/

    schema.ingest.file=${server.local.startpath}/application.properties

    # Schema Version Related Attributes
    schema.uri.base.path=/aai/schema-service
    # Lists all of the versions in the schema
    schema.version.list=v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27
    # Specifies from which version should the depth parameter to default to zero
    schema.version.depth.start=v11
    # Specifies from which version should the related link be displayed in response payload
    schema.version.related.link.start=v11

    # Specifies from which version should the client see only the uri excluding host info
    # Before this version server base will also be included
    schema.version.app.root.start=v11
    # Specifies from which version should the namespace be changed
    schema.version.namespace.change.start=v12
    # Specifies from which version should the client start seeing the edge label in payload
    schema.version.edge.label.start=v12
    # Specifies the version that the application should default to
    schema.version.api.default=v23
---
# Source: aai/charts/aai-schema-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-schema-service-realm
  namespace: amcop-system
  labels:
    app: aai-schema-service
    chart: aai-schema-service-11.0.0
    release: dev
    heritage: Helm
data:
  realm.properties: |
    AAI:OBF:1gfr1ev31gg7,admin
    MSO:OBF:1jzx1lz31k01,admin
    SDNC:OBF:1itr1i0l1i151isv,admin
    DCAE:OBF:1g8u1f9d1f991g8w,admin
    POLICY:OBF:1mk61i171ima1im41i0j1mko,admin
    ASDC:OBF:1f991j0u1j001f9d,admin
    VID:OBF:1jm91i0v1jl9,admin
    APPC:OBF:1f991ksf1ksf1f9d,admin
    ModelLoader:OBF:1qvu1v2h1sov1sar1wfw1j7j1wg21saj1sov1v1x1qxw,admin
    AaiUI:OBF:1gfr1p571unz1p4j1gg7,admin
    OOF:OBF:1img1ke71ily,admin
    aai@aai.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    aai-graphadmin@aai-graphadmin.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    so@so.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdnc@sdnc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    dcae@dcae.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    policy@policy.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdc@sdc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vid@vid.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    appc@appc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    oof@oof.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    pomba@pomba.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vfc@vfc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
---
# Source: aai/charts/aai-traversal/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-traversal
  namespace: amcop-system
  labels:
    app: aai-traversal
    chart: aai-traversal-11.0.0
    release: dev
    heritage: Helm
data:
  logback.xml: |2-

    <configuration scan="true" scanPeriod="60 seconds" debug="false">
      <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

      <property resource="application.properties" />

      <property name="maxHistory" value='7' />
      <property name="totalSizeCap" value='6GB' />
      <property name="queueSize" value='1000'/>
      <property name="logToFileEnabled" value='true'/>

      <property name="namespace" value="aai-traversal" />

      <property name="AJSC_HOME" value="${AJSC_HOME:-.}" />
      <jmxConfigurator />
      <property name="logDirectory" value="${AJSC_HOME}/logs" />
      <!-- Old patterns
        <property name="eelfLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfAuditLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfMetricLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{targetVirtualEntity}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%ecompServiceName|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%ecompResponseCode|%ecompResponseDescription|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
        <property name="eelfTransLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%ecompServiceName|%X{partnerName}|%ecompStatusCode|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{partnerName}:%m%n"/>
        -->
      <property name="p_tim" value="%d{&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, UTC}" />
      <property name="p_lvl" value="%level" />
      <property name="p_log" value="%logger" />
      <property name="p_mdc" value="%replace(%replace(%replace(%mdc){'\t','\\\\t'}){'\n', '\\\\n'}){'\\|', '!'}" />
      <property name="p_msg" value="%replace(%replace(%msg){'\t', '\\\\t'}){'\n','\\\\n'}" />
      <property name="p_exc" value="%replace(%replace(%rootException){'\t', '\\\\t'}){'\n','\\\\n'}" />
      <property name="p_mak" value="%replace(%replace(%marker){'\t', '\\\\t'}){'\n','\\\\n'}" />
      <property name="p_thr" value="%thread" />
      <property name="pattern" value="%nopexception${p_tim}\t${p_thr}\t${p_lvl}\t${p_log}\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t%n" />
      <!-- Patterns from onap demo -->
      <property name="errorPattern" value="%X{LogTimestamp}|%X{RequestID}|%thread|%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{TargetEntity}|%replace(%X{TargetServiceName}){'\\|', '!'}|%.-5level|%X{ErrorCode}|%X{ErrorDesc}|%msg%n" />
      <property name="debugPattern" value="%X{LogTimestamp}|%X{RequestID}|%msg\t${p_mdc}\t${p_msg}\t${p_exc}\t${p_mak}\t|^%n" />
      <property name="auditPattern" value="%X{EntryTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||${p_mak}|${p_mdc}|||%msg%n" />
      <property name="metricPattern" value="%X{InvokeTimestamp}|%X{LogTimestamp}|%X{RequestID}|%X{ServiceInstanceID}|%thread||%replace(%X{ServiceName}){'\\|', '!'}|%X{PartnerName}|%X{TargetEntity}|%replace(%X{TargetServiceName}){'\\|', '!'}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||%X{TargetVirtualEntity}|${p_mak}|${p_mdc}|||%msg%n" />
      <property name="transLogPattern" value="%X{LogTimestamp}|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{RequestID}|%X{ServiceInstanceID}|%-10t|%X{ServerFQDN}|%X{ServiceName}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%replace(%replace(%X{ResponseDesc}){'\\|', '!'}){'\r|\n', '^'}|%X{InstanceUUID}|%level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{clientIpAddress}||%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{PartnerName}:%m%n" />
      <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
      <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
      <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
          <providers>
            <timestamp><fieldName>timestamp</fieldName></timestamp>
            <message/>
            <mdc>
              <fieldName>context</fieldName>
              <excludeMdcKeyName>ServerIPAddress</excludeMdcKeyName>
              <excludeMdcKeyName>EntryTimestamp</excludeMdcKeyName>
              <excludeMdcKeyName>InvokeTimestamp</excludeMdcKeyName>
              <excludeMdcKeyName>ErrorCode</excludeMdcKeyName>
              <excludeMdcKeyName>ErrorDesc</excludeMdcKeyName>
            </mdc>
            <stackTrace>
              <fieldName>exception</fieldName>
              <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                <exclude>^sun\.reflect\..*\.invoke</exclude>
                <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                <rootCauseFirst>true</rootCauseFirst>
              </throwableConverter>
            </stackTrace>
            <threadName><fieldName>thread</fieldName></threadName>
            <loggerName>
              <fieldName>logger</fieldName>
              <shortenedLoggerNameLength>36</shortenedLoggerNameLength>
            </loggerName>
            <logLevel/>
            <pattern>
              <pattern>{"logType":"app"}</pattern>
            </pattern>
          </providers>
        </encoder>
      </appender>

      <if condition='property("logToFileEnabled").contains("true")'>
        <then>
          <appender name="SANE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/sane.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/sane.log.%d{yyyy-MM-dd}</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{1024} - %msg%n
              </pattern>
            </encoder>
          </appender>
          <appender name="asyncSANE" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="SANE" />
          </appender>
          <appender name="METRIC" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/metrics.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/metrics.log.%d{yyyy-MM-dd}</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${metricPattern}</pattern>
            </encoder>
          </appender>
          <appender name="asyncMETRIC" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="METRIC" />
          </appender>
          <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>DEBUG</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <file>${logDirectory}/rest/debug.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/debug.log.%d{yyyy-MM-dd}</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${debugPattern}</pattern>
            </encoder>
          </appender>
          <appender name="asyncDEBUG" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <appender-ref ref="DEBUG" />
            <includeCallerData>true</includeCallerData>
          </appender>
          <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/error.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/error.log.%d{yyyy-MM-dd}</fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>WARN</level>
            </filter>
            <encoder>
              <pattern>${errorPattern}</pattern>
            </encoder>
          </appender>
          <appender name="asyncERROR" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <appender-ref ref="ERROR" />
          </appender>
          <appender name="AUDIT" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logDirectory}/rest/audit.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/audit.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${auditPattern}</pattern>
            </encoder>
          </appender>
          <appender name="asyncAUDIT" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="AUDIT" />
          </appender>
          <appender name="translog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>DEBUG</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <file>${logDirectory}/rest/translog.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/rest/translog.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${transLogPattern}</pattern>
            </encoder>
          </appender>
          <appender name="asynctranslog" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="translog" />
          </appender>
          <appender name="dmaapAAIEventConsumer" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>WARN</level>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/error.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/error.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${errorPattern}</pattern>
            </encoder>
          </appender>
          <appender name="dmaapAAIEventConsumerDebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>DEBUG</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/debug.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/debug.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${debugPattern}</pattern>
            </encoder>
          </appender>
          <appender name="dmaapAAIEventConsumerInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>INFO</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/dmaap-transaction.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/dmaap-transaction.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${auditPattern}</pattern>
            </encoder>
          </appender>
          <appender name="dmaapAAIEventConsumerMetric" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
              <level>INFO</level>
              <onMatch>ACCEPT</onMatch>
              <onMismatch>DENY</onMismatch>
            </filter>
            <File>${logDirectory}/dmaapAAIEventConsumer/metrics.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/metrics.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${metricPattern}</pattern>
            </encoder>
          </appender>
          <appender name="external" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>WARN</level>
            </filter>
            <file>${logDirectory}/external/external.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/external/external.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>${debugPattern}</pattern>
            </encoder>
          </appender>
          <appender name="auth" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>DEBUG</level>
            </filter>
            <file>${logDirectory}/auth/auth.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <fileNamePattern>${logDirectory}/auth/auth.log.%d{yyyy-MM-dd}
              </fileNamePattern>
              <maxHistory>${maxHistory}</maxHistory>
              <totalSizeCap>${totalSizeCap}</totalSizeCap>
            </rollingPolicy>
            <encoder>
              <pattern>%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}[%thread] %-5level %logger{1024} - %msg%n</pattern>
            </encoder>
          </appender>
          <appender name="asyncAUTH" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>${queueSize}</queueSize>
            <includeCallerData>true</includeCallerData>
            <appender-ref ref="auth" />
          </appender>
        </then>
      </if>

      <!-- logback internals logging -->
      <logger name="ch.qos.logback.classic" level="WARN" />
      <logger name="ch.qos.logback.core" level="WARN" />

      <logger name="com.att.aft.dme2" level="WARN" />
      <logger name="com.jayway.jsonpath" level="WARN" />

      <logger name="org.apache" level="OFF" />
      <logger name="org.apache.commons" level="WARN" />
      <logger name="org.apache.zookeeper" level="OFF" />
      <logger name="org.codehaus.groovy" level="WARN" />
      <logger name="org.eclipse.jetty" level="WARN" />
      <!-- Spring related loggers -->
      <logger name="org.springframework" level="WARN" />
      <logger name="org.springframework.beans" level="WARN" />
      <logger name="org.springframework.web" level="WARN" />
      <logger name="org.janusgraph" level="WARN" />
      <logger name="org.zookeeper" level="OFF" />


      <logger name="org.onap.aai" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncDEBUG" />
            <appender-ref ref="asyncSANE" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.aai.aaf.auth" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncAUTH" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.aai.aailog.logs.AaiScheduledTaskAuditLog" level="INFO" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncAUDIT" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.logging.filter.base.AbstractAuditLogFilter" level="INFO" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncAUDIT" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.aai.aailog.logs.AaiDBMetricLog" level="INFO" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncMETRIC" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.aai.aailog.logs.AaiDmaapMetricLog" level="INFO" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dmaapAAIEventConsumerMetric" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.aai.logging.ErrorLogHelper" level="WARN" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asyncERROR" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.aai.interceptors.post" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="asynctranslog" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="org.onap.aai.dmaap" level="DEBUG" additivity="false">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dmaapAAIEventConsumer" />
            <appender-ref ref="dmaapAAIEventConsumerDebug" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <logger name="com.att.nsa.mr" level="INFO">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="dmaapAAIEventConsumerInfo" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </logger>

      <root level="DEBUG">
        <if condition='property("logToFileEnabled").contains("true")'>
          <then>
            <appender-ref ref="external" />
          </then>
        </if>
        <appender-ref ref="STDOUT" />
      </root>
    </configuration>
  localhost-access-logback.xml: "\r\n<configuration scan=\"true\" scanPeriod=\"60 seconds\" debug=\"false\">\r\n    <property name=\"AJSC_HOME\" value=\"${AJSC_HOME:-.}\" />\r\n    <property name=\"maxHistory\" value='7' />\r\n    <property name=\"totalSizeCap\" value='6GB' />\r\n    <property name=\"logToFileEnabled\" value='true'/>\r\n\r\n    <if condition='property(\"logToFileEnabled\").contains(\"true\")'>\r\n        <then>\r\n            <appender name=\"ACCESS\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n                <file>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log</file>\r\n                <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n                    <fileNamePattern>${AJSC_HOME}/logs/ajsc-jetty/localhost_access.log.%d{yyyy-MM-dd}\r\n                    </fileNamePattern>\r\n                    <maxHistory>${maxHistory}</maxHistory>\r\n                    <totalSizeCap>${totalSizeCap}</totalSizeCap>\r\n                </rollingPolicy>\r\n                <encoder class=\"org.onap.aai.logging.CustomLogPatternLayoutEncoder\">\r\n                    <Pattern>%a %u %z [%t] \"%m %U%q\" %s %b %y %i{X-TransactionId} %i{X-FromAppId} %i{X-Forwarded-For} %i{X-AAI-SSL-Client-CN} %i{X-AAI-SSL-Client-OU} %i{X-AAI-SSL-Client-O} %i{X-AAI-SSL-Client-L} %i{X-AAI-SSL-Client-ST} %i{X-AAI-SSL-Client-C} %i{X-AAI-SSL-Client-NotBefore} %i{X-AAI-SSL-Client-NotAfter} %i{X-AAI-SSL-Client-DN} %D</Pattern>\r\n                </encoder>\r\n            </appender>\r\n            <appender-ref ref=\"ACCESS\" />\r\n        </then>\r\n    </if>\r\n\r\n    <appender name=\"STDOUTACCESS\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder class=\"org.onap.aai.logging.CustomLogPatternLayoutEncoder\">\r\n            <Pattern>%a %u %z [%t] \"%m %U%q\" %s %b %y %i{X-TransactionId} %i{X-FromAppId} %i{X-Forwarded-For} %i{X-AAI-SSL-Client-CN} %i{X-AAI-SSL-Client-OU} %i{X-AAI-SSL-Client-O} %i{X-AAI-SSL-Client-L} %i{X-AAI-SSL-Client-ST} %i{X-AAI-SSL-Client-C} %i{X-AAI-SSL-Client-NotBefore} %i{X-AAI-SSL-Client-NotAfter} %i{X-AAI-SSL-Client-DN} %D - \"logType\": \"access\"</Pattern>\r\n        </encoder>\r\n    </appender>\r\n    <appender-ref ref=\"STDOUTACCESS\" />\r\n</configuration>\r\n"
  janusgraph-realtime.properties: |2


    query.fast-property=true
    query.smart-limit=false



    storage.backend=cql
    storage.hostname=cassandra
    storage.cql.keyspace=aaigraph
    storage.username=cassandra
    storage.password=cassandra

    storage.cql.read-consistency-level=LOCAL_QUORUM
    storage.cql.write-consistency-level=LOCAL_QUORUM
    storage.cql.replication-factor=1
    storage.cql.only-use-local-consistency-for-system-operations=true



    storage.lock.wait-time=300
    # Setting db-cache to false ensure the fastest propagation of changes across servers
    cache.db-cache = false
    #load graphson file on startup
    load.snapshot.file=false
  janusgraph-cached.properties: |2


    query.fast-property=true
    query.smart-limit=false



    storage.backend=cql
    storage.hostname=cassandra
    storage.cql.keyspace=aaigraph
    storage.username=cassandra
    storage.password=cassandra

    storage.cql.read-consistency-level=LOCAL_QUORUM
    storage.cql.write-consistency-level=LOCAL_QUORUM
    storage.cql.replication-factor=1
    storage.cql.only-use-local-consistency-for-system-operations=true



    storage.lock.wait-time=300
    #caching on
    cache.db-cache = true
    cache.db-cache-clean-wait = 20
    cache.db-cache-time = 180000
    cache.db-cache-size = 0.3

    #load graphson file on startup
    load.snapshot.file=false
  aaiconfig.properties: |2


    aai.config.checktime=1000

    # this could come from siteconfig.pl?
    aai.config.nodename=AutomaticallyOverwritten


    aai.server.url.base=http://aai.amcop-system/aai/
    aai.server.url=http://aai.amcop-system/aai/v23/
    aai.global.callback.url=http://aai.amcop-system/aai/



    aai.tools.enableBasicAuth=true
    aai.tools.username=AAI
    aai.tools.password=AAI




    aai.notification.current.version=v23
    aai.notificationEvent.default.status=UNPROCESSED
    aai.notificationEvent.default.eventType=AAI-EVENT
    aai.notificationEvent.default.domain=dev
    aai.notificationEvent.default.sourceName=aai
    aai.notificationEvent.default.sequenceNumber=0
    aai.notificationEvent.default.severity=NORMAL
    aai.notificationEvent.default.version=v23
    # This one lets us enable/disable resource-version checking on updates/deletes
    aai.resourceversion.enableflag=true
    aai.logging.maxStackTraceEntries=10
    aai.default.api.version=v23

    # Used by Model-processing code
    aai.model.delete.sleep.per.vtx.msec=500
    aai.model.query.resultset.maxcount=50
    aai.model.query.timeout.sec=90

    aai.model.proc.max.levels=50
    aai.edgeTag.proc.max.levels=50

    aai.logging.trace.enabled=true
    aai.logging.trace.logrequest=false
    aai.logging.trace.logresponse=false

    aai.transaction.logging=true
    aai.transaction.logging.get=false
    aai.transaction.logging.post=false

    aai.realtime.clients=SDNC,MSO,SO,robot-ete

    #timeout for traversal enabled flag
    aai.traversal.timeoutenabled=true

    #timeout app specific
    aai.traversal.timeout.appspecific=JUNITTESTAPP1,1|JUNITTESTAPP2,-1|DCAE-CCS,-1|DCAES,-1|AAI-FILEGEN-GFPIP,-1

    #default timeout limit added for traversal if not overridden (in ms)
    aai.traversal.timeoutlimit=180000

    #timeout for traversal dsl enabled flag
    aai.traversal.dsl.timeoutenabled=true

    #timeout app specific -1 to bypass for that app id, a whole number to override the timeout with that value (in ms)
    aai.traversal.dsl.timeout.appspecific=JUNITTESTAPP1,1|JUNITTESTAPP2,-1|AAI-TOOLS,-1|DCAE-CCS,1200000|DCAES,1200000|VPESAT,-1|AAI-CACHER,-1|VidAaiController,300000|AAI-UI,180000

    #default timeout limit added for traversal dsl if not overridden (in ms)
    aai.traversal.dsl.timeoutlimit=150000

    # Threshold for margin of error (in ms) for resources_with_sot format to derive the most recent http method performed
    aai.resource.formatter.threshold=10
    aai.dsl.override=ZV4V7E3N77SKIB6MR9MHQ6M4P6Q99Z7M76RBODA

    aai.jms.enable=false
  application.properties: |2-

    info.build.artifact=aai-traversal
    info.build.name=traversal
    info.build.description=Traversal Microservice
    info.build.version=1.3.0

    spring.application.name=aai-traversal
    spring.jersey.type=filter

    spring.main.allow-bean-definition-overriding=true
    server.servlet.context-path=/

    spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,org.keycloak.adapters.springboot.KeycloakAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration
    spring.profiles.active=production
    spring.jersey.application-path=${schema.uri.base.path}
    #The max number of active threads in this pool
    server.tomcat.max-threads=200
    #The minimum number of threads always kept alive
    server.tomcat.min-Spare-Threads=25
    #The number of milliseconds before an idle thread shutsdown, unless the number of active threads are less or equal to minSpareThreads
    server.tomcat.max-idle-time=60000

    # If you get an application startup failure that the port is already taken
    # If thats not it, please check if the key-store file path makes sense
    server.local.startpath=aai-traversal/src/main/resources/
    server.basic.auth.location=${server.local.startpath}etc/auth/realm.properties

    server.port=8446

    security.require-ssl=false
    server.ssl.enabled=false


    # JMS bind address host port
    jms.bind.address=tcp://localhost:61647
    dmaap.ribbon.listOfServers=message-router.amcop-system:3904
    dmaap.ribbon.transportType=http

    # Schema related attributes for the oxm and edges
    # Any additional schema related attributes should start with prefix schema
    schema.configuration.location=N/A
    schema.source.name=onap
    schema.nodes.location=${server.local.startpath}/schema/${schema.source.name}/oxm/
    schema.edges.location=${server.local.startpath}/schema/${schema.source.name}/dbedgerules/
    # Location of where the stored queries are
    schema.queries.location=${server.local.startpath}/schema/${schema.source.name}/query/

    schema.ingest.file=${server.local.startpath}/application.properties

    # Schema Version Related Attributes

    schema.uri.base.path=/aai
    # Lists all of the versions in the schema
    schema.version.list=v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27
    # Specifies from which version should the depth parameter to default to zero
    schema.version.depth.start=v11
    # Specifies from which version should the related link be displayed in response payload
    schema.version.related.link.start=v11

    # Specifies from which version should the client see only the uri excluding host info
    # Before this version server base will also be included
    schema.version.app.root.start=v11
    # Specifies from which version should the namespace be changed
    schema.version.namespace.change.start=v12
    # Specifies from which version should the client start seeing the edge label in payload
    schema.version.edge.label.start=v12
    # Specifies the version that the application should default to
    schema.version.api.default=v23

    schema.translator.list=schema-service
    schema.service.base.url=http://aai-schema-service.amcop-system:8452/aai/schema-service/v1/
    schema.service.nodes.endpoint=nodes?version=
    schema.service.edges.endpoint=edgerules?version=
    schema.service.versions.endpoint=versions
    schema.service.custom.queries.endpoint=stored-queries
    schema.service.client=no-auth



    #to expose the Prometheus scraping endpoint
    management.port=8448
    management.endpoints.enabled-by-default=false
    management.security.enabled=false
    endpoints.enabled=false
    endpoints.info.enabled=false
    endpoints.prometheus.enabled=false
    endpoints.health.enabled=false
    management.metrics.web.server.auto-time-requests=false
    management.metrics.distribution.percentiles-histogram[http.server.requests]=true
    management.metrics.distribution.sla[http.server.requests]=20ms, 30ms, 40ms, 50ms, 60ms, 70ms, 80ms, 90ms, 100ms, 500ms, 1000ms, 5000ms, 7000ms
    #Add common tag for grouping all aai related metrics
    management.metrics.tags.group_id=aai
    #It is not advisable to use labels to store dimensions with high cardinality. Enable this option only for debug purposes. For more information: https://github.com/micrometer-metrics/micrometer/issues/1584
    scrape.uri.metrics=false
  application-keycloak.properties: |
    spring.autoconfigure.exclude=\
      org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
      org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

    multi.tenancy.enabled=true
    keycloak.auth-server-url=http://keycloak.your.domain:8180/auth
    keycloak.realm=aai-traversal
    keycloak.resource=aai-traversal-app
    keycloak.public-client=false
    keycloak.principal-attribute=preferred_username

    keycloak.ssl-required=external
    keycloak.bearer-only=true
  realm.properties: |
    AAI:OBF:1gfr1ev31gg7,admin
    MSO:OBF:1jzx1lz31k01,admin
    SDNC:OBF:1itr1i0l1i151isv,admin
    DCAE:OBF:1g8u1f9d1f991g8w,admin
    POLICY:OBF:1mk61i171ima1im41i0j1mko,admin
    ASDC:OBF:1f991j0u1j001f9d,admin
    VID:OBF:1jm91i0v1jl9,admin
    APPC:OBF:1f991ksf1ksf1f9d,admin
    ModelLoader:OBF:1qvu1v2h1sov1sar1wfw1j7j1wg21saj1sov1v1x1qxw,admin
    AaiUI:OBF:1gfr1p571unz1p4j1gg7,admin
    OOF:OBF:1img1ke71ily,admin
    aai@aai.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    so@so.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdnc@sdnc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    dcae@dcae.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    policy@policy.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    sdc@sdc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vid@vid.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    appc@appc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    oof@oof.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    pomba@pomba.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
    vfc@vfc.onap.org:OBF:1fia1ju61l871lfe18xp18xr18xt1lc41l531jrk1fek,admin
---
# Source: aai/charts/aai-traversal/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-aai-traversal-aaf-props
  namespace: amcop-system
  labels:
    app: aai-traversal
    chart: aai-traversal-11.0.0
    release: dev
    heritage: Helm
data:
  org.osaaf.location.props: |+
    ##
    ## org.osaaf.location.props
    ##
    ## Localized Machine Information
    ##
    # Almeda California ?
    cadi_latitude=37.78187
    cadi_longitude=-122.26147

    # Locate URL (which AAF Env)
    aaf_locate_url=https://aaf-locate.onap:8095

    # AAF URL
    aaf_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.service:2.1

    # AAF Environment Designation
    aaf_env=DEV

    # OAuth2 Endpoints
    aaf_oauth2_token_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.token:2.1/token
    aaf_oauth2_introspect_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.introspect:2.1/introspect


  permissions.properties: |-
    permission.type=org.onap.aai.traversal
    permission.instance=*
  org.onap.aai.props: |
    ############################################################
    # Properties Generated by AT&T Certificate Manager
    # @copyright 2016, AT&T
    # Modifications Copyright (c) 2020 Orange
    ############################################################
    cadi_x509_issuers=CN=intermediateCA_1, OU=OSAAF, O=ONAP, C=US:CN=intermediateCA_7, OU=OSAAF, O=ONAP, C=US:CN=intermediateCA_9, OU=OSAAF, O=ONAP, C=US
    cadi_keyfile=/opt/app/osaaf/local/org.onap.aai-traversal.keyfile
    cadi_keystore=/opt/app/osaaf/local/org.onap.aai-traversal.p12
    cadi_keystore_password=${KEYSTORE_PASSWORD}

    #cadi_key_password=enc:9xs_lJ9QQRDoMcHqLbGg40-gefGrw-sLMjWL40ejbyqdC7Jt_pQfY6ajBLGcbLuL
    cadi_alias=aai@aai.onap.org
    cadi_truststore=/opt/app/osaaf/local/truststoreONAPall.jks
    cadi_truststore_password=${TRUSTSTORE_ALL_PASSWORD}
    cadi_loglevel=INFO
    cadi_bath_convert=/opt/app/aai-traversal/resources/aaf/bath_config.csv
  cadi.properties: |2

    cadi_loglevel=INFO
    cadi_prop_files=/opt/app/aai-traversal/resources/aaf/org.osaaf.location.props:/opt/app/aai-traversal/resources/aaf/org.onap.aai.props

    # OAuth2
    aaf_oauth2_token_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.token:2.1/token
    aaf_oauth2_introspect_url=https://AAF_LOCATE_URL/onap.org.osaaf.aaf.introspect:2.1/introspect
---
# Source: aai/charts/aai-graphadmin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aai-graphadmin
  namespace: amcop-system
  labels:
    app: aai-graphadmin
    chart: aai-graphadmin-11.0.0
    release: dev
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - port: 8449
    name: http
  - port: 5005
    name: tcp-5005
  - port: 8448
    name: aai-graphadmin-8448
  selector:
    app: aai-graphadmin
    release: dev
---
# Source: aai/charts/aai-resources/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aai-resources
  namespace: amcop-system
  labels:
    app: aai-resources
    chart: aai-resources-11.0.0
    release: dev
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - port: 8447
    name: http
  - port: 5005
    name: tcp-5005
  - port: 8448
    name: aai-resources-8448
  selector:
    app: aai-resources
    release: dev
  clusterIP: None
  sessionAffinity: None
---
# Source: aai/charts/aai-schema-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aai-schema-service
  namespace: amcop-system
  labels:
    app: aai-schema-service
    chart: aai-schema-service-11.0.0
    release: dev
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - port: 8452
    name: http
  - port: 5005
    name: tcp-5005
  selector:
    app: aai-schema-service
    release: dev
---
# Source: aai/charts/aai-traversal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aai-traversal
  namespace: amcop-system
  labels:
    app: aai-traversal
    chart: aai-traversal-11.0.0
    release: dev
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - port: 8446
    name: http
  - port: 5005
    name: tcp-5005
  - port: 8448
    name: aai-traversal-8448
  selector:
    app: aai-traversal
    release: dev
  clusterIP: None
  sessionAffinity: None
---
# Source: aai/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aai
  namespace: amcop-system
  labels:
    app: aai
    chart: aai-11.0.0
    release: dev
    heritage: Helm
spec:
  ports:
  - name: http
    port: 8443
    targetPort: 8080
  type: ClusterIP
  selector:
    app: aai
  clusterIP:
  sessionAffinity: None
---
# Source: aai/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aai-internal
  namespace: amcop-system
  labels:
    app: aai
    chart: aai-11.0.0
    release: dev
    heritage: Helm
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  type: ClusterIP
  selector:
    app: aai
---
# Source: aai/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aai-metrics
  namespace: amcop-system
  labels:
    app: aai-metrics
    chart: aai-11.0.0
    release: dev
    heritage: Helm
spec:
  ports:
  - port: 8448
    targetPort: 8448
    name: prometheus
  type: ClusterIP
  selector:
    app: aai
  clusterIP: None
---
# Source: aai/charts/aai-graphadmin/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-aai-graphadmin
  namespace: amcop-system
  labels:
    app: aai-graphadmin
    chart: aai-graphadmin-11.0.0
    release: dev
    heritage: Helm
spec:
  replicas: 1
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: aai-graphadmin
  template:
    metadata:
      labels:
        app: aai-graphadmin
        release: dev
      name: aai-graphadmin
      annotations:
        checksum/config: 45e1372bc0358c8b5534253b87d078a3512987c31318900f779033548dd295f6
    spec:
      hostname: aai-graphadmin
      terminationGracePeriodSeconds: 120
      initContainers:
      - command:
        - /app/ready.py
        args:
        - --job-name
        - dev-aai-graphadmin-create-db-schema
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/amcop/readiness:3.0.1
        imagePullPolicy: Always
        name: aai-graphadmin-readiness
      containers:
      - name: aai-graphadmin
        image: "amcopnightly/aai-graphadmin:aarna-master-v4.0-2024-01-18"
        imagePullPolicy: Always
        env:
        - name: LOCAL_USER_ID
          value: "1000"
        - name: LOCAL_GROUP_ID
          value: "1000"
        - name: INTERNAL_PORT_1
          value: "8449"
        - name: INTERNAL_PORT_2
          value: "5005"
        - name: INTERNAL_PORT_3
          value: "8448"
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/janusgraph-realtime.properties
          name: config
          subPath: janusgraph-realtime.properties
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/janusgraph-cached.properties
          name: config
          subPath: janusgraph-cached.properties
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/aaiconfig.properties
          name: properties
          subPath: aaiconfig.properties
        - mountPath: /opt/aai/logroot/AAI-RES
          name: logs
        - mountPath: /opt/app/aai-graphadmin/resources/logback.xml
          name: config
          subPath: logback.xml
        - mountPath: /opt/app/aai-graphadmin/resources/localhost-access-logback.xml
          name: config
          subPath: localhost-access-logback.xml
        - mountPath: /opt/app/aai-graphadmin/resources/etc/auth/realm.properties
          name: config
          subPath: realm.properties
        - mountPath: /opt/app/aai-graphadmin/resources/application.properties
          name: properties
          subPath: application.properties
        ports:
        - containerPort: 8449
        - containerPort: 5005
        - containerPort: 8448
        lifecycle:
          # wait for active requests (long-running tasks) to be finished
          # Before the SIGTERM is invoked, Kubernetes exposes a preStop hook in the Pod.
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                while (netstat -an | grep ESTABLISHED | grep -e $INTERNAL_PORT_1 -e $INTERNAL_PORT_2)
                do sleep 10
                done
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container

        readinessProbe:
          tcpSocket:
            port: 8449
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 0.5
            memory: 1536Mi
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - cassandra
            topologyKey: kubernetes.io/hostname
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - aai-graphadmin
              topologyKey: kubernetes.io/hostname
            weight: 1
      # side car containers

      serviceAccountName: dev-aai-graphadmin-read
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: dev-aai-graphadmin
      - name: properties
        configMap:
          name: dev-aai-graphadmin-properties
      restartPolicy: Always
      imagePullSecrets:
      - name: onap-docker-registry-key
---
# Source: aai/charts/aai-resources/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-aai-resources
  namespace: amcop-system
  labels:
    app: aai-resources
    chart: aai-resources-11.0.0
    release: dev
    heritage: Helm
spec:
  replicas: 1
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: aai-resources
  template:
    metadata:
      labels:
        app: aai-resources
        release: dev
      name: aai-resources
      annotations:
        checksum/config: c585a9a723cf9a55a8af3c47f52fb450065cccb435893931f75196167cbb870b
        msb.onap.org/service-info: '[ { "serviceName": "_aai-cloudInfrastructure", "version": "v11", "url": "/aai/v11/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v11", "url": "/aai/v11/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v12", "url": "/aai/v12/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v12", "url": "/aai/v12/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v13", "url": "/aai/v13/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v13", "url": "/aai/v13/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v14", "url": "/aai/v14/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v14", "url": "/aai/v14/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v15", "url": "/aai/v15/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v15", "url": "/aai/v15/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v16", "url": "/aai/v16/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v16", "url": "/aai/v16/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v17", "url": "/aai/v17/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v17", "url": "/aai/v17/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v18", "url": "/aai/v18/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v18", "url": "/aai/v18/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-cloudInfrastructure", "version": "v19", "url": "/aai/v19/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/cloud-infrastructure" }, { "serviceName": "aai-cloudInfrastructure", "version": "v19", "url": "/aai/v19/cloud-infrastructure", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v11", "url": "/aai/v11/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/business" }, { "serviceName": "aai-business", "version": "v11", "url": "/aai/v11/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v12", "url": "/aai/v12/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/business" }, { "serviceName": "aai-business", "version": "v12", "url": "/aai/v12/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v13", "url": "/aai/v13/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/business" }, { "serviceName": "aai-business", "version": "v13", "url": "/aai/v13/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v14", "url": "/aai/v14/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/business" }, { "serviceName": "aai-business", "version": "v14", "url": "/aai/v14/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v15", "url": "/aai/v15/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/business" }, { "serviceName": "aai-business", "version": "v15", "url": "/aai/v15/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v16", "url": "/aai/v16/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/business" }, { "serviceName": "aai-business", "version": "v16", "url": "/aai/v16/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v17", "url": "/aai/v17/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/business" }, { "serviceName": "aai-business", "version": "v17", "url": "/aai/v17/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v18", "url": "/aai/v18/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/business" }, { "serviceName": "aai-business", "version": "v18", "url": "/aai/v18/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-business", "version": "v19", "url": "/aai/v19/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/business" }, { "serviceName": "aai-business", "version": "v19", "url": "/aai/v19/business", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v11", "url": "/aai/v11/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/actions" }, { "serviceName": "aai-actions", "version": "v11", "url": "/aai/v11/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v12", "url": "/aai/v12/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/actions" }, { "serviceName": "aai-actions", "version": "v12", "url": "/aai/v12/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v13", "url": "/aai/v13/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/actions" }, { "serviceName": "aai-actions", "version": "v13", "url": "/aai/v13/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v14", "url": "/aai/v14/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/actions" }, { "serviceName": "aai-actions", "version": "v14", "url": "/aai/v14/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v15", "url": "/aai/v15/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/actions" }, { "serviceName": "aai-actions", "version": "v15", "url": "/aai/v15/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v16", "url": "/aai/v16/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/actions" }, { "serviceName": "aai-actions", "version": "v16", "url": "/aai/v16/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v17", "url": "/aai/v17/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/actions" }, { "serviceName": "aai-actions", "version": "v17", "url": "/aai/v17/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v18", "url": "/aai/v18/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/actions" }, { "serviceName": "aai-actions", "version": "v18", "url": "/aai/v18/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-actions", "version": "v19", "url": "/aai/v19/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/actions" }, { "serviceName": "aai-actions", "version": "v19", "url": "/aai/v19/actions", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v11", "url": "/aai/v11/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v11", "url": "/aai/v11/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v12", "url": "/aai/v12/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v12", "url": "/aai/v12/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v13", "url": "/aai/v13/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v13", "url": "/aai/v13/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v14", "url": "/aai/v14/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v14", "url": "/aai/v14/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v15", "url": "/aai/v15/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v15", "url": "/aai/v15/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v16", "url": "/aai/v16/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v16", "url": "/aai/v16/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v17", "url": "/aai/v17/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v17", "url": "/aai/v17/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v18", "url": "/aai/v18/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v18", "url": "/aai/v18/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-service-design-and-creation", "version": "v19", "url": "/aai/v19/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/service-design-and-creation" }, { "serviceName": "aai-service-design-and-creation", "version": "v19", "url": "/aai/v19/service-design-and-creation", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v11", "url": "/aai/v11/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/network" }, { "serviceName": "aai-network", "version": "v11", "url": "/aai/v11/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v12", "url": "/aai/v12/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/network" }, { "serviceName": "aai-network", "version": "v12", "url": "/aai/v12/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v13", "url": "/aai/v13/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/network" }, { "serviceName": "aai-network", "version": "v13", "url": "/aai/v13/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v14", "url": "/aai/v14/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/network" }, { "serviceName": "aai-network", "version": "v14", "url": "/aai/v14/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v15", "url": "/aai/v15/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/network" }, { "serviceName": "aai-network", "version": "v15", "url": "/aai/v15/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v16", "url": "/aai/v16/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/network" }, { "serviceName": "aai-network", "version": "v16", "url": "/aai/v16/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v17", "url": "/aai/v17/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/network" }, { "serviceName": "aai-network", "version": "v17", "url": "/aai/v17/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v18", "url": "/aai/v18/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/network" }, { "serviceName": "aai-network", "version": "v18", "url": "/aai/v18/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-network", "version": "v19", "url": "/aai/v19/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/network" }, { "serviceName": "aai-network", "version": "v19", "url": "/aai/v19/network", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v11", "url": "/aai/v11/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/external-system" }, { "serviceName": "aai-externalSystem", "version": "v11", "url": "/aai/v11/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v12", "url": "/aai/v12/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/external-system" }, { "serviceName": "aai-externalSystem", "version": "v12", "url": "/aai/v12/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v13", "url": "/aai/v13/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/external-system" }, { "serviceName": "aai-externalSystem", "version": "v13", "url": "/aai/v13/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v14", "url": "/aai/v14/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/external-system" }, { "serviceName": "aai-externalSystem", "version": "v14", "url": "/aai/v14/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v15", "url": "/aai/v15/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/external-system" }, { "serviceName": "aai-externalSystem", "version": "v15", "url": "/aai/v15/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v16", "url": "/aai/v16/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/external-system" }, { "serviceName": "aai-externalSystem", "version": "v16", "url": "/aai/v16/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v17", "url": "/aai/v17/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/external-system" }, { "serviceName": "aai-externalSystem", "version": "v17", "url": "/aai/v17/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v18", "url": "/aai/v18/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/external-system" }, { "serviceName": "aai-externalSystem", "version": "v18", "url": "/aai/v18/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-externalSystem", "version": "v19", "url": "/aai/v19/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/external-system" }, { "serviceName": "aai-externalSystem", "version": "v19", "url": "/aai/v19/external-system", "protocol": "REST", "port": "8447", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, ]'
    spec:
      hostname: aai-resources
      terminationGracePeriodSeconds: 120
      initContainers:
      - name: aai-resources-readiness
        command:
        - /app/ready.py
        args:
        - --job-name
        - dev-aai-graphadmin-create-db-schema
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/amcop/readiness:3.0.1
        imagePullPolicy: Always
      containers:
      - name: aai-resources
        image: "amcopnightly/aai-resources:aarna-master-v4.0-2024-01-18"
        imagePullPolicy: Always
        command:
        - sh
        args:
        - -c
        - |
          echo "*** retrieve Truststore and Keystore password"
          export $(cat /opt/app/osaaf/local/mycreds.prop | xargs -0)
          echo "*** actual launch of AAI Resources"
          /bin/bash /opt/app/aai-resources/docker-entrypoint.sh
        env:
        - name: LOCAL_USER_ID
          value: "1000"
        - name: LOCAL_GROUP_ID
          value: "1000"
        - name: POST_JAVA_OPTS
          value: '-Djavax.net.ssl.trustStore=/opt/app/osaaf/local/truststoreONAPall.jks -Djavax.net.ssl.trustStorePassword=changeit'
        - name: TRUSTORE_ALL_PASSWORD
          value: changeit
        - name: INTERNAL_PORT_1
          value: "8447"
        - name: INTERNAL_PORT_2
          value: "5005"
        - name: INTERNAL_PORT_3
          value: "8448"
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /opt/app/aai-resources/resources/etc/appprops/janusgraph-realtime.properties
          name: dev-aai-resources-config
          subPath: janusgraph-realtime.properties
        - mountPath: /opt/app/aai-resources/resources/etc/appprops/janusgraph-cached.properties
          name: dev-aai-resources-config
          subPath: janusgraph-cached.properties
        - mountPath: /opt/app/aai-resources/resources/etc/appprops/aaiconfig.properties
          name: dev-aai-resources-config
          subPath: aaiconfig.properties
        - mountPath: /opt/aai/logroot/AAI-RES
          name: logs
        - mountPath: /opt/app/aai-resources/resources/logback.xml
          name: dev-aai-resources-config
          subPath: logback.xml
        - mountPath: /opt/app/aai-resources/resources/localhost-access-logback.xml
          name: dev-aai-resources-config
          subPath: localhost-access-logback.xml
        - mountPath: /opt/app/aai-resources/resources/etc/auth/realm.properties
          name: dev-aai-resources-config
          subPath: realm.properties
        - mountPath: /opt/app/aai-resources/resources/aaf/bath_config.csv
          name: dev-aai-resources-aaf-certs
          subPath: bath_config.csv
        - mountPath: /opt/app/aai-resources/resources/aaf/org.onap.aai.props
          name: dev-aai-resources-aaf-properties
          subPath: org.onap.aai.props
        - mountPath: /opt/app/aai-resources/resources/aaf/org.osaaf.location.props
          name: dev-aai-resources-aaf-properties
          subPath: org.osaaf.location.props
        - mountPath: /opt/app/aai-resources/resources/aaf/permissions.properties
          name: dev-aai-resources-aaf-properties
          subPath: permissions.properties
        - mountPath: /opt/app/aai-resources/resources/cadi.properties
          name: dev-aai-resources-aaf-properties
          subPath: cadi.properties
        - mountPath: /opt/app/aai-resources/resources/application.properties
          name: dev-aai-resources-config
          subPath: application.properties
        - mountPath: /opt/app/aai-resources/resources/application-keycloak.properties
          name: dev-aai-resources-config
          subPath: application-keycloak.properties
        ports:
        - containerPort: 8447
        - containerPort: 5005
        - containerPort: 8448
        lifecycle:
          # wait for active requests (long-running tasks) to be finished
          # Before the SIGTERM is invoked, Kubernetes exposes a preStop hook in the Pod.
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                while (netstat -an | grep ESTABLISHED | grep -e $INTERNAL_PORT_1 -e $INTERNAL_PORT_2)
                do sleep 10
                done
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container
        readinessProbe:
          httpGet:
            path: /aai/util/echo?action=checkDB
            port: 8447
            scheme: HTTP
            httpHeaders:
            - name: X-FromAppId
              value: ReadinessCheck
            - name: X-TransactionId
              value: ReadinessCheck_TID
            - name: Accept
              value: application/json
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
      # side car containers

      serviceAccountName: dev-aai-resources-read
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: logs
        emptyDir: {}
      - name: dev-aai-resources-config
        configMap:
          name: dev-aai-resources
      - name: dev-aai-resources-aaf-properties
        configMap:
          name: dev-aai-resources-aaf-props
      - name: dev-aai-resources-aaf-certs
        secret:
          secretName: dev-aai-resources-aaf-keys
      restartPolicy: Always
      imagePullSecrets:
      - name: "onap-docker-registry-key"
---
# Source: aai/charts/aai-schema-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-aai-schema-service
  namespace: amcop-system
  labels:
    app: aai-schema-service
    chart: aai-schema-service-11.0.0
    release: dev
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: aai-schema-service
  template:
    metadata:
      labels:
        app: aai-schema-service
        release: dev
      name: aai-schema-service
      annotations:
        checksum/config: b541d89eee4574d6bf481299ef3f89902e7144fe6124bbf5b4c0ede41a0ac9e9
    spec:
      containers:
      - name: aai-schema-service
        image: "amcopnightly/aai-schema-service:aarna-master-v4.0-2024-01-18"
        imagePullPolicy: Always
        env:
        - name: LOCAL_USER_ID
          value: "1000"
        - name: LOCAL_GROUP_ID
          value: "1000"
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /opt/app/aai-schema-service/resources/etc/appprops/aaiconfig.properties
          name: aaiconfig-conf
          subPath: aaiconfig.properties
        - mountPath: /opt/aai/logroot/AAI-SS
          name: logs
        - mountPath: /opt/app/aai-schema-service/resources/logback.xml
          name: log-conf
          subPath: logback.xml
        - mountPath: /opt/app/aai-schema-service/resources/localhost-access-logback.xml
          name: localhost-access-log-conf
          subPath: localhost-access-logback.xml
        - mountPath: /opt/app/aai-schema-service/resources/etc/auth/realm.properties
          name: realm-conf
          subPath: realm.properties
        - mountPath: /opt/app/aai-schema-service/resources/application.properties
          name: springapp-conf
          subPath: application.properties
        ports:
        - containerPort: 8452
        - containerPort: 5005
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container

        readinessProbe:
          tcpSocket:
            port: 8452
          initialDelaySeconds: 60
          periodSeconds: 10
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - cassandra
            topologyKey: kubernetes.io/hostname
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - aai-schema-service
              topologyKey: kubernetes.io/hostname
            weight: 1
      # side car containers

      serviceAccountName: dev-aai-schema-service-read
      volumes:
      - name: aai-common-aai-auth-mount
        secret:
          secretName: aai-common-aai-auth
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: logs
        emptyDir: {}
      - name: log-conf
        configMap:
          name: dev-aai-schema-service-log
      - name: localhost-access-log-conf
        configMap:
          name: dev-aai-schema-service-localhost-access-log
      - name: springapp-conf
        configMap:
          name: dev-aai-schema-service-springapp
      - name: aaiconfig-conf
        configMap:
          name: dev-aai-schema-service-aaiconfig
      - name: realm-conf
        configMap:
          name: dev-aai-schema-service-realm
      restartPolicy: Always
      imagePullSecrets:
      - name: "onap-docker-registry-key"
---
# Source: aai/charts/aai-traversal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-aai-traversal
  namespace: amcop-system
  labels:
    app: aai-traversal
    chart: aai-traversal-11.0.0
    release: dev
    heritage: Helm
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: aai-traversal
  template:
    metadata:
      labels:
        app: aai-traversal
        release: dev
      name: aai-traversal
      annotations:
        checksum/config: dad025052abb38ea8f5a21dded716c0c471347f39818cab5f1113f8e2fa8b019
        msb.onap.org/service-info: '[ { "serviceName": "_aai-generic-query", "version": "v11", "url": "/aai/v11/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v11", "url": "/aai/v11/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v12", "url": "/aai/v12/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v12", "url": "/aai/v12/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v13", "url": "/aai/v13/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v13", "url": "/aai/v13/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v14", "url": "/aai/v14/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v14", "url": "/aai/v14/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v15", "url": "/aai/v15/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v15", "url": "/aai/v15/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v16", "url": "/aai/v16/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v16", "url": "/aai/v16/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v17", "url": "/aai/v17/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v17", "url": "/aai/v17/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v18", "url": "/aai/v18/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v18", "url": "/aai/v18/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-generic-query", "version": "v19", "url": "/aai/v19/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/search/generic-query" }, { "serviceName": "aai-generic-query", "version": "v19", "url": "/aai/v19/search/generic-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v11", "url": "/aai/v11/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v11", "url": "/aai/v11/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v12", "url": "/aai/v12/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v12", "url": "/aai/v12/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v13", "url": "/aai/v13/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v13", "url": "/aai/v13/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v14", "url": "/aai/v14/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v14", "url": "/aai/v14/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v15", "url": "/aai/v15/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v15", "url": "/aai/v15/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v16", "url": "/aai/v16/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v16", "url": "/aai/v16/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v17", "url": "/aai/v17/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v17", "url": "/aai/v17/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v18", "url": "/aai/v18/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v18", "url": "/aai/v18/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nodes-query", "version": "v19", "url": "/aai/v19/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/search/nodes-query" }, { "serviceName": "aai-nodes-query", "version": "v19", "url": "/aai/v19/search/nodes-query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v11", "url": "/aai/v11/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v11/query" }, { "serviceName": "aai-nquery", "version": "v11", "url": "/aai/v11/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v12", "url": "/aai/v12/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v12/query" }, { "serviceName": "aai-nquery", "version": "v12", "url": "/aai/v12/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v13", "url": "/aai/v13/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v13/query" }, { "serviceName": "aai-nquery", "version": "v13", "url": "/aai/v13/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v14", "url": "/aai/v14/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v14/query" }, { "serviceName": "aai-nquery", "version": "v14", "url": "/aai/v14/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v15", "url": "/aai/v15/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v15/query" }, { "serviceName": "aai-nquery", "version": "v15", "url": "/aai/v15/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v16", "url": "/aai/v16/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v16/query" }, { "serviceName": "aai-nquery", "version": "v16", "url": "/aai/v16/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v17", "url": "/aai/v17/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v17/query" }, { "serviceName": "aai-nquery", "version": "v17", "url": "/aai/v17/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v18", "url": "/aai/v18/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v18/query" }, { "serviceName": "aai-nquery", "version": "v18", "url": "/aai/v18/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-nquery", "version": "v19", "url": "/aai/v19/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/v19/query" }, { "serviceName": "aai-nquery", "version": "v19", "url": "/aai/v19/query", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" }, { "serviceName": "_aai-named-query", "url": "/aai/search", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1", "path": "/aai/search" }, { "serviceName": "aai-named-query", "url": "/aai/search", "protocol": "REST", "port": "8446", "enable_ssl": true, "lb_policy":"ip_hash", "visualRange": "1" } ]'
    spec:
      hostname: aai-traversal
      terminationGracePeriodSeconds: 120
      initContainers:
      - command:
        - /app/ready.py
        args:
        - --job-name
        - dev-aai-graphadmin-create-db-schema
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/amcop/readiness:3.0.1
        imagePullPolicy: Always
        name: aai-traversal-readiness
      containers:
      - name: aai-traversal
        image: "amcopnightly/aai-traversal:aarna-master-v4.0-2024-01-18"
        imagePullPolicy: Always
        command:
        - sh
        args:
        - -c
        - |
          echo "*** retrieve Truststore and Keystore password"
          export $(cat /opt/app/osaaf/local/mycreds.prop | xargs -0)
          echo "*** actual launch of AAI Resources"
          /bin/bash /opt/app/aai-traversal/docker-entrypoint.sh
        env:
        - name: TRUSTORE_ALL_PASSWORD
          value: changeit
        - name: DISABLE_UPDATE_QUERY
          value: "true"
        - name: LOCAL_USER_ID
          value: "1000"
        - name: LOCAL_GROUP_ID
          value: "1000"
        - name: INTERNAL_PORT_1
          value: "8446"
        - name: INTERNAL_PORT_2
          value: "5005"
        - name: INTERNAL_PORT_3
          value: "8448"
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /opt/app/aai-traversal/resources/etc/appprops/janusgraph-realtime.properties
          name: dev-aai-traversal-config
          subPath: janusgraph-realtime.properties
        - mountPath: /opt/app/aai-traversal/resources/etc/appprops/janusgraph-cached.properties
          name: dev-aai-traversal-config
          subPath: janusgraph-cached.properties
        - mountPath: /opt/app/aai-traversal/resources/etc/appprops/aaiconfig.properties
          name: dev-aai-traversal-config
          subPath: aaiconfig.properties
        - mountPath: /opt/aai/logroot/AAI-GQ
          name: logs
        - mountPath: /opt/aai/logroot/AAI-GQ/misc
          name: dev-aai-traversal-logs-misc
        - mountPath: /opt/app/aai-traversal/resources/logback.xml
          name: dev-aai-traversal-config
          subPath: logback.xml
        - mountPath: /opt/app/aai-traversal/resources/localhost-access-logback.xml
          name: dev-aai-traversal-config
          subPath: localhost-access-logback.xml
        - mountPath: /opt/app/aai-traversal/resources/etc/auth/realm.properties
          name: dev-aai-traversal-config
          subPath: realm.properties
        - mountPath: /opt/app/aai-traversal/resources/aaf/bath_config.csv
          name: dev-aai-traversal-aaf-certs
          subPath: bath_config.csv
        - mountPath: /opt/app/aai-traversal/resources/aaf/org.onap.aai.props
          name: dev-aai-traversal-aaf-properties
          subPath: org.onap.aai.props
        - mountPath: /opt/app/aai-traversal/resources/aaf/org.osaaf.location.props
          name: dev-aai-traversal-aaf-properties
          subPath: org.osaaf.location.props
        - mountPath: /opt/app/aai-traversal/resources/aaf/permissions.properties
          name: dev-aai-traversal-aaf-properties
          subPath: permissions.properties
        - mountPath: /opt/app/aai-traversal/resources/cadi.properties
          name: dev-aai-traversal-aaf-properties
          subPath: cadi.properties
        - mountPath: /opt/app/aai-traversal/resources/application.properties
          name: dev-aai-traversal-config
          subPath: application.properties
        - mountPath: /opt/app/aai-traversal/resources/application-keycloak.properties
          name: dev-aai-traversal-config
          subPath: application-keycloak.properties
        ports:
        - containerPort: 8446
        - containerPort: 5005
        - containerPort: 8448
        lifecycle:
          # wait for active requests (long-running tasks) to be finished
          # Before the SIGTERM is invoked, Kubernetes exposes a preStop hook in the Pod.
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                while (netstat -an | grep ESTABLISHED | grep -e $INTERNAL_PORT_1 -e $INTERNAL_PORT_2)
                do sleep 10
                done
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container

        readinessProbe:
          httpGet:
            path: /aai/util/echo?action=checkDB
            port: 8446
            scheme: HTTP
            httpHeaders:
            - name: X-FromAppId
              value: ReadinessCheck
            - name: X-TransactionId
              value: ReadinessCheck_TID
            - name: Accept
              value: application/json
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
      # side car containers
      serviceAccountName: dev-aai-traversal-read
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: logs
        emptyDir: {}
      - name: dev-aai-traversal-logs-misc
        emptyDir: {}
      - name: dev-aai-traversal-config
        configMap:
          name: dev-aai-traversal
      - name: dev-aai-traversal-aaf-properties
        configMap:
          name: dev-aai-traversal-aaf-props
      - name: dev-aai-traversal-aaf-certs
        secret:
          secretName: dev-aai-traversal-aaf
      - name: aai-common-aai-auth-mount
        secret:
          secretName: aai-common-aai-auth
      restartPolicy: Always
      imagePullSecrets:
      - name: "onap-docker-registry-key"
---
# Source: aai/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-aai
  namespace: amcop-system
  labels:
    app: aai
    chart: aai-11.0.0
    release: dev
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: aai
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: aai
        release: dev
      name: dev
      annotations:
        checksum/config: f064f819dcd17643de9abe64d1bd67f1fefc03b578b133bf0349cd5bd455fabd
    spec:
      terminationGracePeriodSeconds:
      initContainers:
      - command:
        - /app/ready.py
        args:
        - --container-name
        - aai-resources
        - --container-name
        - aai-traversal
        - --container-name
        - aai-graphadmin
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/amcop/readiness:3.0.1
        imagePullPolicy: Always
        name: aai-readiness
        resources:
          requests:
            memory: 100Mi
            cpu: 50m
          limits:
            memory: 100Mi
            cpu: 50m
      containers:
      - name: aai
        image: "amcopnightly/aai-haproxy:aarna-master-v4.0-2024-01-18"
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /dev/log
          name: aai-service-log
        - mountPath: /usr/local/etc/haproxy/haproxy.cfg
          subPath: haproxy.cfg
          name: haproxy-cfg
        ports:
        - containerPort: 8443
        - containerPort: 8080
        - containerPort: 8448
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /aai/util/echo
            port: 8080
            #scheme: HTTPS
            scheme: HTTP
            httpHeaders:
            - name: X-FromAppId
              value: OOM_ReadinessCheck
            - name: X-TransactionId
              value: OOM_ReadinessCheck_TID
            - name: Accept
              value: application/json
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 1Gi
      serviceAccountName: dev-aai-read
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: aai-service-log
        hostPath:
          path: "/dev/log"
      - name: haproxy-cfg
        configMap:
          name: aai-deployment-configmap
      imagePullSecrets:
      - name: "onap-docker-registry-key"
---
# Source: aai/charts/aai-graphadmin/templates/job-create-db.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: dev-aai-graphadmin-create-db-schema
  namespace: amcop-system
  labels:
    app: aai-graphadmin-job
    chart: aai-graphadmin-11.0.0
    release: dev
    heritage: Helm
spec:
  manualSelector: true
  selector:
    matchLabels:
      app: aai-graphadmin-job
      release: dev
  backoffLimit: 20
  template:
    metadata:
      labels:
        app: aai-graphadmin-job
        release: dev
      name: aai-graphadmin
    spec:
      serviceAccountName: dev-aai-graphadmin-read
      initContainers:
      - command:
        - /app/ready.py
        args:
        - --container-name
        - cassandra
        - --container-name
        - aai-schema-service
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/amcop/readiness:3.0.1
        imagePullPolicy: Always
        name: aai-graphadmin-readiness
      containers:
      - name: aai-graphadmin-job
        image: "amcopnightly/aai-graphadmin:aarna-master-v4.0-2024-01-18"
        imagePullPolicy: Always
        command:
        - sh
        args:
        - -c
        - |
          bash docker-entrypoint.sh createDBSchema.sh;
        env:
        - name: LOCAL_USER_ID
          value: "1000"
        - name: LOCAL_GROUP_ID
          value: "1000"
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/janusgraph-realtime.properties
          name: config
          subPath: janusgraph-realtime.properties
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/janusgraph-cached.properties
          name: config
          subPath: janusgraph-cached.properties
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/aaiconfig.properties
          name: properties
          subPath: aaiconfig.properties
        - mountPath: /opt/aai/logroot/AAI-GA
          name: logs
        - mountPath: /opt/app/aai-graphadmin/resources/logback.xml
          name: config
          subPath: logback.xml
        - mountPath: /opt/app/aai-graphadmin/resources/localhost-access-logback.xml
          name: config
          subPath: localhost-access-logback.xml
        - mountPath: /opt/app/aai-graphadmin/resources/application.properties
          name: properties
          subPath: application.properties
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 0.5
            memory: 1536Mi
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - cassandra
            topologyKey: kubernetes.io/hostname
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - aai-graphadmin
              topologyKey: kubernetes.io/hostname
            weight: 1
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: dev-aai-graphadmin
      - name: properties
        configMap:
          name: dev-aai-graphadmin-properties
      restartPolicy: Never
      imagePullSecrets:
      - name: onap-docker-registry-key
---
# Source: aai/charts/aai-traversal/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: dev-aai-traversal-update-query-data
  namespace: amcop-system
  labels:
    app: aai-traversal-job
    chart: aai-traversal-11.0.0
    release: dev
    heritage: Helm
spec:
  manualSelector: true
  selector:
    matchLabels:
      app: aai-traversal-job
      release: dev
  template:
    metadata:
      labels:
        app: aai-traversal-job
        release: dev
      name: aai-traversal
    spec:
      serviceAccountName: dev-aai-traversal-read
      initContainers:
      - command:
        - /app/ready.py
        args:
        - --container-name
        - aai
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/amcop/readiness:3.0.1
        imagePullPolicy: Always
        name: aai-traversal-readiness
      containers:
      - name: aai-traversal-job
        image: "amcopnightly/aai-traversal:aarna-master-v4.0-2024-01-18"
        imagePullPolicy: Always
        command:
        - bash
        - "-c"
        - |
          set -x
          if [ ! -d /opt/aai/logroot/AAI-GQ/misc ]; then mkdir -p /opt/aai/logroot/AAI-GQ/misc; fi
          until nc -w10 -z -v aai.amcop-system 80; do echo "Retrying to reach aai on port 80"; done;
          bash -x /opt/app/aai-traversal/docker-entrypoint.sh install/updateQueryData.sh ;
        env:
        - name: LOCAL_USER_ID
          value: "1000"
        - name: LOCAL_GROUP_ID
          value: "1000"
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /opt/app/aai-traversal/resources/etc/appprops/janusgraph-realtime.properties
          name: dev-aai-traversal-config
          subPath: janusgraph-realtime.properties
        - mountPath: /opt/app/aai-traversal/resources/etc/appprops/janusgraph-cached.properties
          name: dev-aai-traversal-config
          subPath: janusgraph-cached.properties
        - mountPath: /opt/app/aai-traversal/resources/etc/appprops/aaiconfig.properties
          name: dev-aai-traversal-config
          subPath: aaiconfig.properties
        - mountPath: /opt/aai/logroot/AAI-GQ/
          name: dev-aai-traversal-logs
        - mountPath: /opt/aai/logroot/AAI-GQ/misc
          name: dev-aai-traversal-logs-misc
        - mountPath: /opt/app/aai-traversal/resources/logback.xml
          name: dev-aai-traversal-config
          subPath: logback.xml
        - mountPath: /opt/app/aai-traversal/resources/localhost-access-logback.xml
          name: dev-aai-traversal-config
          subPath: localhost-access-logback.xml
        - mountPath: /opt/app/aai-traversal/resources/application.properties
          name: dev-aai-traversal-config
          subPath: application.properties
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: dev-aai-traversal-logs
        emptyDir: {}
      - name: dev-aai-traversal-logs-misc
        emptyDir: {}
      - name: dev-aai-traversal-config
        configMap:
          name: dev-aai-traversal
      restartPolicy: OnFailure
      imagePullSecrets:
      - name: "onap-docker-registry-key"
